import{_ as p,c,b as s,e,w as n,d as l,a,r as i,o as r}from"./app.46e53c5c.js";const u="/mochi-blog/assets/001_koa-onion-model.154a136a.png",js=JSON.parse('{"title":"Koa 基础使用","titleTemplate":false,"description":"","frontmatter":{"date":"2023-01-16 08:20:10","title":"Koa 基础使用","titleTemplate":false,"author":"Mochi","outline":[2,4],"categories":["post"],"tags":["node","koa"]},"headers":[{"level":2,"title":"Koa 简介","slug":"koa-简介","link":"#koa-简介","children":[]},{"level":2,"title":"安装","slug":"安装","link":"#安装","children":[]},{"level":2,"title":"核心概念","slug":"核心概念","link":"#核心概念","children":[{"level":3,"title":"应用","slug":"应用","link":"#应用","children":[]},{"level":3,"title":"上下文","slug":"上下文","link":"#上下文","children":[]},{"level":3,"title":"请求","slug":"请求","link":"#请求","children":[]},{"level":3,"title":"响应","slug":"响应","link":"#响应","children":[]}]},{"level":2,"title":"路由","slug":"路由","link":"#路由","children":[]},{"level":2,"title":"错误处理","slug":"错误处理","link":"#错误处理","children":[]}],"relativePath":"_POSTS/node/005_koa-basic.md","lastUpdated":1673869884000}'),d={name:"_POSTS/node/005_koa-basic.md"},_=a("",12),h={class:"details custom-block"},y=s("summary",null,"App API",-1),C=s("li",null,"app.callback() : 返回适用于 http.createServer() 方法的回调函数来处理请求",-1),A=s("li",null,"app.keys= : 设置签名的 Cookie 密钥",-1),D=s("h4",{id:"中间件函数",tabindex:"-1"},[l("中间件函数 "),s("a",{class:"header-anchor",href:"#中间件函数","aria-hidden":"true"},"#")],-1),x=a("",10),f={class:"details custom-block"},g=s("summary",null,"Context API",-1),F=s("li",null,"ctx.req : Node 的 request 对象",-1),m=s("li",null,"ctx.res : Node 的 response 对象, 绕过 Koa 的 resopnse 处理是不被支持的",-1),q=s("li",null,"ctx.state : 推荐的命名空间，用于通过中间件传递信息和前端视图",-1),k=s("li",null,"ctx.app : 应用实例",-1),b=s("li",null,"ctx.app.emit : 发送事件",-1),T=s("li",null,"ctx.cookies.get(name, [options]) : 通过 options 获取 cookie name",-1),v=s("li",null,"ctx.cookies.set(name, value, [options]) : 通过 options 设置 cookie name 的 value",-1),E=s("li",null,"ctx.assert(value, [status], [msg], [properties]) : 当 !value 时抛出一个类似 throw 错误的帮助方法",-1),S=s("li",null,"ctx.respond : 如果需要绕过 Koa 的内置 response 处理, 可以显式设置 ctx.respond = false",-1),P=s("p",null,[l("绕过 Koa 的 resopnse 处理是不被支持的。应 "),s("strong",null,"避免使用"),l(" 以下 node 属性：")],-1),K=s("ul",null,[s("li",null,"ctx.res.statusCode"),s("li",null,"ctx.res.writeHead()"),s("li",null,"ctx.res.write()"),s("li",null,"ctx.res.end()")],-1),R={class:"details custom-block"},I=s("summary",null,"Context 别名",-1),V=s("p",null,"Request 别名",-1),w=s("li",null,"ctx.header",-1),N=s("li",null,"ctx.method",-1),L=s("li",null,"ctx.method=",-1),j=s("li",null,"ctx.url",-1),U=s("li",null,"ctx.url=",-1),H=s("li",null,"ctx.originalUrl",-1),B=s("li",null,"ctx.origin",-1),W=s("li",null,"ctx.href",-1),O=s("li",null,"ctx.path",-1),M=s("li",null,"ctx.path=",-1),$=a("",19),G=s("p",null,"Response 别名",-1),J=s("li",null,"ctx.body",-1),Z=s("li",null,"ctx.status",-1),z=s("li",null,"ctx.message",-1),Q=s("li",null,"ctx.length=",-1),X=s("li",null,"ctx.length",-1),Y=s("li",null,"ctx.type=",-1),ss=s("li",null,"ctx.type",-1),ls=s("li",null,"ctx.headerSent",-1),es=s("li",null,"ctx.redirect()",-1),ns=s("li",null,"ctx.attachment()",-1),ts=s("li",null,"ctx.append()",-1),as=s("li",null,"ctx.remove()",-1),os=s("li",null,"ctx.lastModified=",-1),is=s("li",null,"ctx.etag=",-1),ps=s("p",null,[l("Request 和 Response 上属性或方法 ctx 大多都可 "),s("strong",null,"直接"),l(" 访问, 如 ctx.body。")],-1),cs=s("p",null,"但需要注意的是, 有关获取消息头的一般是请求头, 设置消息头的一般是响应头。如",-1),rs=s("ul",null,[s("li",null,"ctx.headers 指的是 request.headers"),s("li",null,"ctx.set() 指的是 response.set()")],-1),us=s("h3",{id:"请求",tabindex:"-1"},[l("请求 "),s("a",{class:"header-anchor",href:"#请求","aria-hidden":"true"},"#")],-1),ds=s("p",null,"Koa Request 对象是 node 原生请求对象之上的抽象, 提供了诸多对 HTTP 服务器开发有用的功能。",-1),_s={class:"details custom-block"},hs=s("summary",null,"Request API",-1),ys=s("li",null,"request.header : 请求头对象, request.headers 的别名",-1),Cs=a("",28),As=s("h3",{id:"响应",tabindex:"-1"},[l("响应 "),s("a",{class:"header-anchor",href:"#响应","aria-hidden":"true"},"#")],-1),Ds=s("p",null,"Koa Response 对象是 node 原生响应对象之上的抽象, 提供了诸多对 HTTP 服务器开发有用的功能。",-1),xs={class:"details custom-block"},fs=s("summary",null,"Response API",-1),gs=s("li",null,"response.header : response.headers 的别名",-1),Fs=s("li",null,"response.message : 响应状态信息",-1),ms=s("li",null,"response.length : 响应的 Content-Length 或 undefined",-1),qs=s("ul",null,[s("li",null,"String : Content-Type 默认为 text/html 或 text/plain, 同时默认字符集是 utf-8"),s("li",null,"Buffer : Content-Type 默认为 application/octet-stream"),s("li",null,"Stream : Content-Type 默认为 application/octet-stream"),s("li",null,"Object : Content-Type 默认为 application/json")],-1),ks=s("li",null,"response.get(field) : 不区分大小写获取响应头字段值 field",-1),bs=s("li",null,"response.has(field) : 判断响应头是否含有字段值 field",-1),Ts=s("li",null,"response.set(field, value) : 设置响应头",-1),vs=s("li",null,"response.append(field, value) : 追加响应头",-1),Es=a("",11),Ss=a("",4);function Ps(Ks,Rs,Is,Vs,ws,Ns){const t=i("f"),o=i("un");return r(),c("div",null,[_,s("details",h,[y,s("ul",null,[s("li",null,[e(t,null,{default:n(()=>[l("app.listen(...)")]),_:1}),l(" : 将 koa 应用程序绑定端口")]),s("li",null,[e(t,null,{default:n(()=>[l("app.use(function)")]),_:1}),l(" : 将中间件方法添加到应用程序, app.use() 返回 this, 可以链式调用")]),s("li",null,[e(t,null,{default:n(()=>[l("app.context")]),_:1}),l(" : 获取上下文")]),C,A,s("li",null,[e(t,null,{default:n(()=>[l("app.on('error', cb)")]),_:1}),l(" : 错误处理")])])]),D,s("p",null,[l("中间件函数能够访问"),e(o,null,{default:n(()=>[l("上下文(ctx)")]),_:1}),l("以及应用程序请求/响应循环中的"),e(o,null,{default:n(()=>[l("下一个中间件函数(next)")]),_:1}),l("。")]),x,s("details",f,[g,s("ul",null,[F,m,s("li",null,[e(t,null,{default:n(()=>[l("ctx.request")]),_:1}),l(" : koa 的 Request 对象")]),s("li",null,[e(t,null,{default:n(()=>[l("ctx.response")]),_:1}),l(" : koa 的 Response 对象")]),s("li",null,[e(t,null,{default:n(()=>[l("ctx.params")]),_:1}),l(" : 路由参数获取, 如 /:id")]),q,k,b,T,v,s("li",null,[e(t,null,{default:n(()=>[l("ctx.throw(\\[status], \\[msg], \\[properties])")]),_:1}),l(" : 抛出一个包含 status 属性错误的方法, status 默认值为 500")]),E,S])]),P,K,s("details",R,[I,s("ol",null,[s("li",null,[V,s("ul",null,[w,s("li",null,[e(t,null,{default:n(()=>[l("ctx.headers")]),_:1})]),N,L,j,U,H,B,W,O,M,s("li",null,[e(t,null,{default:n(()=>[l("ctx.query")]),_:1})]),$])]),s("li",null,[G,s("ul",null,[J,s("li",null,[e(t,null,{default:n(()=>[l("ctx.body=")]),_:1})]),Z,s("li",null,[e(t,null,{default:n(()=>[l("ctx.status=")]),_:1})]),z,s("li",null,[e(t,null,{default:n(()=>[l("ctx.message=")]),_:1})]),Q,X,Y,ss,ls,es,ns,s("li",null,[e(t,null,{default:n(()=>[l("ctx.set()")]),_:1})]),ts,as,os,is])])])]),ps,cs,rs,us,ds,s("details",_s,[hs,s("ul",null,[s("li",null,[e(t,null,{default:n(()=>[l("request.headers")]),_:1}),l(" : 请求头对象")]),ys,s("li",null,[e(t,null,{default:n(()=>[l("request.query")]),_:1}),l(" : ?分隔的查询字符串或空对象")]),Cs])]),As,Ds,s("details",xs,[fs,s("ul",null,[s("li",null,[e(t,null,{default:n(()=>[l("response.headers")]),_:1}),l(" : 响应头对象")]),gs,s("li",null,[e(t,null,{default:n(()=>[l("response.status")]),_:1}),l(" : 响应状态, 没发送 body 默认 404")]),Fs,ms,s("li",null,[e(t,null,{default:n(()=>[l("response.body")]),_:1}),l(" : 响应主体, 包含响应主体 response.status 默认 200"),qs]),ks,bs,Ts,vs,s("li",null,[e(t,null,{default:n(()=>[l("response.set(fields)")]),_:1}),l(" : 用一个对象设置多个响应头 fields")]),Es])]),Ss])}const Us=p(d,[["render",Ps]]);export{js as __pageData,Us as default};
