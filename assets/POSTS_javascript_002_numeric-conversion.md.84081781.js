import{_ as e,c as t,b as s,d as n,w as p,e as a,a as o,r as c,o as r}from"./app.b957dbbf.js";const O=JSON.parse('{"title":"JavaScript 数值转换","titleTemplate":false,"description":"","frontmatter":{"date":"2023-02-01 10:43:09","title":"JavaScript 数值转换","titleTemplate":false,"author":"Mochi","outline":[2,4],"categories":["post"],"tags":["javascript"]},"headers":[{"level":2,"title":"Number()","slug":"number","link":"#number","children":[]},{"level":2,"title":"parseInt()","slug":"parseint","link":"#parseint","children":[]},{"level":2,"title":"parseFloat()","slug":"parsefloat","link":"#parsefloat","children":[]}],"relativePath":"_POSTS/javascript/002_numeric-conversion.md","lastUpdated":1675221766000}'),i={name:"_POSTS/javascript/002_numeric-conversion.md"},y=s("h1",{id:"javascript-数值转换",tabindex:"-1"},[a("JavaScript 数值转换 "),s("a",{class:"header-anchor",href:"#javascript-数值转换","aria-hidden":"true"},"#")],-1),A=s("p",null,"有 3 个函数可以将非数值转换为数值：Number()、parseInt() 和 parseFloat()。",-1),D=s("p",null,"Number() 是转型函数, 可用于任何数据类型。后两个主要用于将字符串转换为数值。对于同样的参数, 这 3 个函数执行的操作也不同。",-1),F=s("h2",{id:"number",tabindex:"-1"},[a("Number() "),s("a",{class:"header-anchor",href:"#number","aria-hidden":"true"},"#")],-1),C=s("p",null,"Number() 函数基于如下规则执行转换:",-1),u=s("li",null,"布尔值, true 转换为 1, false 转换为 0",-1),_=s("li",null,"数值, 直接返回",-1),d=s("li",null,"null, 返回 0",-1),h=s("li",null,[a("字符串, 应用以下规则 "),s("ul",null,[s("li",null,"如果是空字符串, 则返回 0"),s("li",null,"如果字符串包含数值字符, 包括数值字符前面带加、减号的情况, 则转换为一个十进制数值。因此, Number('1')返回 1, Number('123')返回 123, Number('011')返回 11(忽略前面的零)"),s("li",null,'如果字符串包含有效的浮点值格式如"1.1", 则会转换为相应的浮点值(同样, 忽略前面的零)'),s("li",null,'如果字符串包含有效的十六进制格式如"0xf", 则会转换为与该十六进制值对应的十进制整数值'),s("li",null,"如果字符串包含除上述情况之外的其他字符, 则返回 NaN")])],-1),f=s("li",null,"对象, 调用 valueOf()方法, 并按照上述规则转换返回的值。如果转换结果是 NaN, 则调用 toString()方法, 再按照转换字符串的规则转换",-1),m=o(`<div class="warning custom-block"><p class="custom-block-title">注意</p><p>一元加操作符与 Number() 函数遵循相同的转换规则。</p></div><p>下面是几个具体的例子:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#82AAFF;">Number</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// 0</span></span>
<span class="line"><span style="color:#82AAFF;">Number</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">null</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// 0</span></span>
<span class="line"><span style="color:#82AAFF;">Number</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">undefined</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// NaN</span></span>
<span class="line"><span style="color:#82AAFF;">Number</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">123hello</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// NaN</span></span>
<span class="line"></span></code></pre></div><h2 id="parseint" tabindex="-1">parseInt() <a class="header-anchor" href="#parseint" aria-hidden="true">#</a></h2><p>parseInt() 通常用于将字符串转换为整数数值, 且与 Number() 转换规则有着很大的不同。</p>`,5),b=s("li",null,"字符串最前面的空格会被忽略, 从第一个非空格字符开始转换",-1),E=s("li",null,"如果第一个字符不是数值字符、加号或减号, 返回 NaN",-1),N=s("li",null,'如果第一个字符是数值字符、加号或减号, 则继续依次检测每个字符, 直到字符串末尾, 或碰到非数值字符。比如, "1234blue"会被转换为 1234, 因为"blue"会被完全忽略。类似地, "22.5"会被转换为 22, 因为小数点不是有效的整数字符',-1),v=s("li",null,'如果字符串以"0x"开头, 就会被解释为十六进制整数。如果字符串以"0"开头, 且紧跟着数值字符, 在非严格模式下会被某些实现解释为八进制整数',-1),g=o(`<p>下面是几个具体的例子:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#82AAFF;">parseInt</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">1234blue</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// 1234</span></span>
<span class="line"><span style="color:#82AAFF;">parseInt</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// NaN</span></span>
<span class="line"><span style="color:#82AAFF;">parseInt</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">0xA</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// 10, 解释为十六进制整数</span></span>
<span class="line"><span style="color:#82AAFF;">parseInt</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">22.5</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// 22</span></span>
<span class="line"><span style="color:#82AAFF;">parseInt</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">70</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// 70, 解释为十进制值</span></span>
<span class="line"><span style="color:#82AAFF;">parseInt</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">0xf</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// 15, 解释为十六进制整数</span></span>
<span class="line"></span></code></pre></div><p>不同的数值格式很容易混淆, 因此 parseInt()也接收第二个参数, 用于指定底数(进制数)。</p><div class="tip custom-block"><p class="custom-block-title">最佳实践</p><p>为避免出错, 建议始终给 parseInt 传入第二个参数</p></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#82AAFF;">parseInt</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">10</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// 2, 按二进制解析</span></span>
<span class="line"><span style="color:#82AAFF;">parseInt</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">10</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">8</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// 8, 按八进制解析</span></span>
<span class="line"><span style="color:#82AAFF;">parseInt</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">10</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// 10, 按十进制解析</span></span>
<span class="line"><span style="color:#82AAFF;">parseInt</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">10</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">16</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// 16, 按十六进制解析</span></span>
<span class="line"></span></code></pre></div><h2 id="parsefloat" tabindex="-1">parseFloat() <a class="header-anchor" href="#parsefloat" aria-hidden="true">#</a></h2><p>parseFloat 与 parseInt() 类似, 通常用于将字符串转换为浮点数值。</p><p>同样, 它也是解析到字符串末尾或者解析到一个无效的浮点数值字符为止。这意味着第一次出现的小数点是有效的, 但第二次出现的小数点就无效了, 此时字符串的剩余字符都会被忽略。因此, &quot;22.34.5&quot;将转换成 22.34。</p>`,8),I=o(`<p>最后, parseFloat()只解析十进制值, 因此不能指定底数。下面是几个具体的例子:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#82AAFF;">parseFloat</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">1234blue</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// 1234, 按整数解析</span></span>
<span class="line"><span style="color:#82AAFF;">parseFloat</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">0xA</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// 0</span></span>
<span class="line"><span style="color:#82AAFF;">parseFloat</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">22.5</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// 22.5</span></span>
<span class="line"><span style="color:#82AAFF;">parseFloat</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">22.34.5</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// 22.34</span></span>
<span class="line"><span style="color:#82AAFF;">parseFloat</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">0908.5</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// 908.5</span></span>
<span class="line"><span style="color:#82AAFF;">parseFloat</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">3.125e7</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// 31250000</span></span>
<span class="line"></span></code></pre></div>`,2);function T(S,x,j,k,V,P){const l=c("un");return r(),t("div",null,[y,A,D,F,C,s("ul",null,[u,_,d,s("li",null,[s("strong",null,[n(l,null,{default:p(()=>[a("undefined, 返回 NaN")]),_:1})])]),h,f]),m,s("ul",null,[s("li",null,[s("strong",null,[n(l,null,{default:p(()=>[a("如果是空字符串, 则返回 NaN")]),_:1})])]),b,E,N,v]),g,n(l,null,{default:p(()=>[a("如果字符串表示整数（没有小数点或者小数点后面只有一个零）, 则 parseFloat()返回整数。")]),_:1}),I])}const $=e(i,[["render",T]]);export{O as __pageData,$ as default};
