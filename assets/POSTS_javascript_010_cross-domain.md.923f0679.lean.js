import{_ as p,c as t,b as a,d as s,e as n,w as o,a as e,r as c,o as r}from"./app.fd3cb011.js";const f=JSON.parse('{"title":"跨域资源共享","titleTemplate":false,"description":"","frontmatter":{"date":"2023-02-04 16:56:30","title":"跨域资源共享","titleTemplate":false,"author":"Mochi","outline":[2,4],"categories":["post"],"tags":["javascript"]},"headers":[{"level":2,"title":"同源策略","slug":"同源策略","link":"#同源策略","children":[]},{"level":2,"title":"跨域解决方案","slug":"跨域解决方案","link":"#跨域解决方案","children":[{"level":3,"title":"CORS","slug":"cors","link":"#cors","children":[]},{"level":3,"title":"JSONP","slug":"jsonp","link":"#jsonp","children":[]},{"level":3,"title":"图片探测","slug":"图片探测","link":"#图片探测","children":[]}]}],"relativePath":"_POSTS/javascript/010_cross-domain.md","lastUpdated":1675513214000}'),i={name:"_POSTS/javascript/010_cross-domain.md"},D=a("h1",{id:"跨域资源共享",tabindex:"-1"},[s("跨域资源共享 "),a("a",{class:"header-anchor",href:"#跨域资源共享","aria-hidden":"true"},"#")],-1),y=a("p",null,"接口请求的一个主要限制是跨源安全策略。默认情况下, 只能访问与发起请求的页面在同一个域内的资源。",-1),d=a("h2",{id:"同源策略",tabindex:"-1"},[s("同源策略 "),a("a",{class:"header-anchor",href:"#同源策略","aria-hidden":"true"},"#")],-1),C=a("p",null,"同源策略是一个重要的安全策略, 它用于限制一个 origin 的文档或者它加载的脚本如何能与另一个源的资源进行交互。它能帮助阻隔恶意文档, 减少可能被攻击的媒介。",-1),A=e("",3),F=e("",13),h=e("",13);function u(g,_,v,b,T,m){const l=c("f");return r(),t("div",null,[D,y,d,C,a("p",null,[s("同源指的是"),n(l,null,{default:o(()=>[s("同域名、同端口、同协议")]),_:1}),s("。如果请求 URL 与发送请求页面在任何方面有所不同, 则会抛出安全错误。")]),A,n(l,null,{default:o(()=>[s("所有跨域解决方案都需要服务端允许和配合。")]),_:1}),F,n(l,null,{default:o(()=>[s("预检请求返回后, 结果会按响应指定的时间缓存一段时间。换句话说, 只有第一次发送这种类型的请求时才会多发送一次额外的 HTTP 请求。")]),_:1}),h])}const x=p(i,[["render",u]]);export{f as __pageData,x as default};
