import{_ as s,c as a,o as n,a as l}from"./app.d83c26ff.js";const C=JSON.parse('{"title":"Node 基础入门","titleTemplate":false,"description":"","frontmatter":{"date":"2023-01-07 13:54:39","title":"Node 基础入门","titleTemplate":false,"author":"Mochi","outline":[2,4],"categories":["post"],"tags":["node"]},"headers":[{"level":2,"title":"安装 Node","slug":"安装-node","link":"#安装-node","children":[]},{"level":2,"title":"运行 node 脚本","slug":"运行-node-脚本","link":"#运行-node-脚本","children":[]},{"level":2,"title":"Node.js 模块化","slug":"node-js-模块化","link":"#node-js-模块化","children":[]},{"level":2,"title":"npm","slug":"npm","link":"#npm","children":[{"level":3,"title":"npm 依赖与开发依赖","slug":"npm-依赖与开发依赖","link":"#npm-依赖与开发依赖","children":[]},{"level":3,"title":"如何使用 npm 安装的软件包","slug":"如何使用-npm-安装的软件包","link":"#如何使用-npm-安装的软件包","children":[]}]},{"level":2,"title":"package.json","slug":"package-json","link":"#package-json","children":[{"level":3,"title":"软件包版本","slug":"软件包版本","link":"#软件包版本","children":[]},{"level":3,"title":"package-lock.json","slug":"package-lock-json","link":"#package-lock-json","children":[]},{"level":3,"title":"查看 npm 包安装版本","slug":"查看-npm-包安装版本","link":"#查看-npm-包安装版本","children":[]}]},{"level":2,"title":"process 核心模块","slug":"process-核心模块","link":"#process-核心模块","children":[{"level":3,"title":"环境变量","slug":"环境变量","link":"#环境变量","children":[]},{"level":3,"title":"命令行参数","slug":"命令行参数","link":"#命令行参数","children":[]}]},{"level":2,"title":"命令行交互问答","slug":"命令行交互问答","link":"#命令行交互问答","children":[]},{"level":2,"title":"搭建 HTTP 服务器","slug":"搭建-http-服务器","link":"#搭建-http-服务器","children":[{"level":3,"title":"node 发送 HTTP 请求","slug":"node-发送-http-请求","link":"#node-发送-http-请求","children":[]}]},{"level":2,"title":"路径模块","slug":"路径模块","link":"#路径模块","children":[]},{"level":2,"title":"文件系统模块","slug":"文件系统模块","link":"#文件系统模块","children":[{"level":3,"title":"文件属性","slug":"文件属性","link":"#文件属性","children":[]},{"level":3,"title":"判断文件/文件夹是否存在","slug":"判断文件-文件夹是否存在","link":"#判断文件-文件夹是否存在","children":[]},{"level":3,"title":"读取文件","slug":"读取文件","link":"#读取文件","children":[]},{"level":3,"title":"写入/追加写入 文件","slug":"写入-追加写入-文件","link":"#写入-追加写入-文件","children":[]},{"level":3,"title":"删除文件","slug":"删除文件","link":"#删除文件","children":[]},{"level":3,"title":"创建新的文件夹","slug":"创建新的文件夹","link":"#创建新的文件夹","children":[]},{"level":3,"title":"重命名文件或文件夹","slug":"重命名文件或文件夹","link":"#重命名文件或文件夹","children":[]},{"level":3,"title":"删除文件夹","slug":"删除文件夹","link":"#删除文件夹","children":[]},{"level":3,"title":"读取目录内容","slug":"读取目录内容","link":"#读取目录内容","children":[]}]}],"relativePath":"_POSTS/node/001_node-basic.md","lastUpdated":1673163682000}'),e={name:"_POSTS/node/001_node-basic.md"},o=l(`<h1 id="node-基础入门" tabindex="-1">Node 基础入门 <a class="header-anchor" href="#node-基础入门" aria-hidden="true">#</a></h1><p>Node.js 是一个可以让 JavaScript 运行在操作系统上的运行环境。</p><h2 id="安装-node" tabindex="-1">安装 Node <a class="header-anchor" href="#安装-node" aria-hidden="true">#</a></h2><ul><li><a href="https://nodejs.org/en/" target="_blank" rel="noreferrer">官网安装</a></li><li><a href="https://github.com/coreybutler/nvm-windows" target="_blank" rel="noreferrer">nvm 安装</a>(推荐)</li></ul><h2 id="运行-node-脚本" tabindex="-1">运行 node 脚本 <a class="header-anchor" href="#运行-node-脚本" aria-hidden="true">#</a></h2><p>运行 node 脚本有两种方式：</p><ol><li>显式告诉 shell 使用 node 运行脚本, 即 <code>node xxx.js</code></li><li>使用 shebang 在文件第一行写入执行环境, 告诉操作系统使用哪个解释器来运行脚本</li></ol><p>shebang 语法由 <code>#!</code> 开头, 其后可以有一个或数个空白字符, 为解释器的绝对路径, 用于调用解释器。</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">#! /usr/bin/node</span></span>
<span class="line"></span></code></pre></div><p>并非所有操作系统的 bin 文件夹中都有 node, 但都应该有 env。可以告诉操作系统使用 node 为参数运行 env：</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-palenight has-highlighted-lines"><code><span class="line highlighted"><span style="color:#676E95;font-style:italic;">#! /usr/bin/env node</span></span>
<span class="line"></span></code></pre></div><p>需要注意的是, 要使用 shebang, 此文件应该具有可执行权限, Linux 可使用 chmod 修改文件权限：</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">chmod</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">u+x</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">xxx.js</span></span>
<span class="line"></span></code></pre></div><h2 id="node-js-模块化" tabindex="-1">Node.js 模块化 <a class="header-anchor" href="#node-js-模块化" aria-hidden="true">#</a></h2><p>Node.js 默认使用 CommonJS 模块化规范, module 对象上最重要的两个属性分别是 <code>id</code> 和 <code>exports</code>, this 默认指向 <code>module.exports</code>。<code>module.paths</code> 是 require 寻址路径。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">module</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">this</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">this</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/* output:</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">Module {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  id: &#39;.&#39;,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  path: &#39;F:\\\\Mochi\\\\mochi-learn\\\\01_node-basic&#39;,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  exports: {},</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  parent: null,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  filename: &#39;F:\\\\Mochi\\\\mochi-learn\\\\01_node-basic\\\\004_modular.js&#39;,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  loaded: false,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  children: [],</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  paths: [</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    &#39;F:\\\\Mochi\\\\mochi-learn\\\\01_node-basic\\\\node_modules&#39;,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    &#39;F:\\\\Mochi\\\\mochi-learn\\\\node_modules&#39;,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    &#39;F:\\\\Mochi\\\\node_modules&#39;,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    &#39;F:\\\\node_modules&#39;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  ]</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">{}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">true</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">*/</span></span>
<span class="line"></span></code></pre></div><h2 id="npm" tabindex="-1">npm <a class="header-anchor" href="#npm" aria-hidden="true">#</a></h2><p>npm 是 Node.js 标准的软件包管理器。</p><p>当使用 npm 安装软件包时, 可以执行两种安装类型：</p><ul><li>全局安装</li><li>本地安装</li></ul><p>本地安装的软件包会被安装到当前文件树中的 node_modules 子文件夹下。<span class="text-red-400">全局安装的软件包确切位置可使用 <code>npm root -g</code> 查看。</span></p><h3 id="npm-依赖与开发依赖" tabindex="-1">npm 依赖与开发依赖 <a class="header-anchor" href="#npm-依赖与开发依赖" aria-hidden="true">#</a></h3><p>开发依赖是仅用于开发的软件包, 在生产环境并不需要, 如测试的软件包、webpack、Babel 等。</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">cowsay</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--save</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 等同于</span></span>
<span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">cowsay</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-S</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">webpack</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--save-dev</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 等同于</span></span>
<span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">webpack</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-D</span></span>
<span class="line"></span></code></pre></div><p><code>-S</code> 是 <code>--save</code> 的缩写, <code>-D</code> 是 <code>--save-dev</code> 的缩写。</p><p>可以使用 <code>@</code> 语法来安装指定版本的软件包。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">npm install cowsay@</span><span style="color:#F78C6C;">1.3</span><span style="color:#89DDFF;">.</span><span style="color:#F78C6C;">0</span></span>
<span class="line"></span></code></pre></div><h3 id="如何使用-npm-安装的软件包" tabindex="-1">如何使用 npm 安装的软件包 <a class="header-anchor" href="#如何使用-npm-安装的软件包" aria-hidden="true">#</a></h3><p>软件包分为两种, 一种是普通的库, 另一种是可执行文件, 也就是我们常说的 cli。</p><p>这两种软件包在安装时都会安装到本地的 node_modules 文件夹中, 不同的是, 如果是可执行文件还会把执行命令放入 <code>node_modules/.bin/</code> 目录下。下面是普通库文件的使用方式：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> _ </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">lodash</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>那如何执行 <code>node_modules/.bin/</code> 的可执行文件呢？有三种方式：</p><ol><li>直接终端输入可执行文件地址, 如 <code>.\\node_modules\\.bin\\cowsay hello world!</code></li><li>通过 <code>npx</code> 执行, 如 <code>npx npx cowsay hello world!</code></li><li>在 package.json 文件中配置 scripts 执行, 如 <code>&quot;scripts&quot;: {&quot;test&quot;: &quot;cowsay hello world!&quot;}</code>, <code>npm test</code></li></ol><h2 id="package-json" tabindex="-1">package.json <a class="header-anchor" href="#package-json" aria-hidden="true">#</a></h2><p>package.json 文件是项目的清单, 它可以做很多完全互不相关的事情。例如, 它是用于工具的配置中心, 也是 npm 和 yarn 存储所有已安装软件包名称和版本的地方。</p><h3 id="软件包版本" tabindex="-1">软件包版本 <a class="header-anchor" href="#软件包版本" aria-hidden="true">#</a></h3><p>在 dependencies 或 devDependencies 中通常类似以下的版本号 <code>^0.13.0</code>、<code>~0.13.0</code> 或 <code>0.13.0</code>。它们是什么意思呢？</p><p>这些符号使用了 semver(语义版本控制), 指定了软件包能接受的更新。所有的版本都有 3 个数字, 第一个是主版本, 第二个是次版本, 第三个是补丁版本。</p><ul><li>如果以 <code>^</code> 开头, 表示接受『主版本不变更即可』的更新。如 <code>^0.13.0</code>, 会更新到主版本为 0 的最新版本, 如 <code>0.new.new</code></li><li>如果以 <code>~</code> 开头, 表示『只接受补丁版本的更新』。如 <code>~0.13.0</code>, 会更新到主版本为 0, 次版本为 13 的最新补丁版本, 如 <code>0.13.new</code></li><li>如果没有任何符号, 表示『只接受确切版本, 不接受更新依赖』。如 <code>0.13.0</code> 只会安装 <code>0.13.0</code> 版本。</li><li>如果是 <code>latest</code>, 表示更新到最新的依赖</li></ul><h3 id="package-lock-json" tabindex="-1">package-lock.json <a class="header-anchor" href="#package-lock-json" aria-hidden="true">#</a></h3><p>在知道了软件包版本控制的方式后, 很容易知道这样是存在缺陷的。</p><p>因为 node_modules 通常不会被提交至 git, 从 git 拉下来执行 <code>npm install</code> 后安装的依赖可能和开发时的依赖不同, 可能是次版本的更新, 也可能是补丁版本的更新。</p><p>如果软件包开发作者严格遵循语义版本控制, 这不会有什么问题。但, 这是不可控的, 如果次版本或补丁版本含有不兼容的更新, 那就会造成项目运行失败！</p><p>在 npm5 之后, npm 引入了 package-lock.json 文件, package-lock.josn 文件也会提交至 git。它会固化当前安装的每个软件包版本, 当运行 <code>npm install</code> 时, 如果项目含有 package-lock.json 文件, 将安装固化版本, 如果没有则以 package.json 为准安装依赖, 然后生成 package.json 文件。</p><p>当运行 <code>npm update</code> 时, <code>package-lock.json</code> 文件中的依赖版本会被更新。</p><h3 id="查看-npm-包安装版本" tabindex="-1">查看 npm 包安装版本 <a class="header-anchor" href="#查看-npm-包安装版本" aria-hidden="true">#</a></h3><p>若要查看所有已安装的 npm 软件包及版本, 可以 <code>npm list --depth=0</code>, depth 参数表示要展示的层级。</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">list</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-g</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--depth=0</span></span>
<span class="line"></span></code></pre></div><p>若要查看软件包在 npm 仓库上最新的可用版本, 可以运行：</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">view</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">package_name</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">version</span></span>
<span class="line"></span></code></pre></div><p>若要查看软件包在 npm 仓库上所有可用版本, 可以运行：</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">view</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">package_name</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">versions</span></span>
<span class="line"></span></code></pre></div><h2 id="process-核心模块" tabindex="-1">process 核心模块 <a class="header-anchor" href="#process-核心模块" aria-hidden="true">#</a></h2><h3 id="环境变量" tabindex="-1">环境变量 <a class="header-anchor" href="#环境变量" aria-hidden="true">#</a></h3><p>Node.js 的 <code>process</code> 核心模块提供了 <code>env</code> 属性, 该属性承载了在启动进程时设置的所有环境变量。</p><p><code>process</code> 核心模块不需要被 &quot;require&quot;, 它是自动可用的。这是访问 NODE_ENV 环境变量的示例, 该环境变量默认情况下被设置为 <code>&#39;development&#39;</code>。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">process</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">env</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">NODE_ENV</span></span>
<span class="line"></span></code></pre></div><p>在脚本运行之前可将其设置为 <code>&#39;production&#39;</code>, 告诉 Node 这是生产环境。可以以相同的方式访问设置任何自定义的环境变量。</p><h3 id="命令行参数" tabindex="-1">命令行参数 <a class="header-anchor" href="#命令行参数" aria-hidden="true">#</a></h3><p>当使用以下命令调用 Node.js 应用程序时, 可以传入任意数量的参数：</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">node</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">xxx.js</span></span>
<span class="line"></span></code></pre></div><p>参数可以是独立的, 也可以具有键和值。例如：<code>node xxx.js name</code> 或 <code>node xxx.js name=abc</code></p><p>获取命令行参数值的方式还是使用 Node.js 内置的 <code>process</code> 核心模块, 它公开了 <code>argv</code> 属性, 该属性是一个包含所有命令行调用参数的数组。</p><ul><li><span class="text-red-400">第一项是 node 命令的完整路径</span></li><li><span class="text-red-400">第二项是正被执行的文件完整路径</span></li><li><span class="text-red-400">其它所有参数从第三项位置开始</span></li></ul><p>下面是执行 <code>node xxx.js ---name=abc</code> 后, 其 <code>process.argv</code> 的值：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">D:</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">nvm install</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">node install</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">node.exe</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">F:</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">Mochi</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">mochi-learn</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">01_node-basic</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">test.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">--name=abc</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span></span>
<span class="line"></span></code></pre></div><p>如需对命令行参数进行解析, 最好的方法是采用第三方库, 如 <a href="https://www.npmjs.com/package/minimist" target="_blank" rel="noreferrer">minimist</a> 或 <a href="https://www.npmjs.com/package/commander" target="_blank" rel="noreferrer">commander</a>。</p><h2 id="命令行交互问答" tabindex="-1">命令行交互问答 <a class="header-anchor" href="#命令行交互问答" aria-hidden="true">#</a></h2><p>如何使 Node.js CLI 程序具有交互性？</p><p>从版本 7 开始, Node.js 提供了 <a href="https://nodejs.org/dist/latest-v18.x/docs/api/readline.html" target="_blank" rel="noreferrer">readline</a> 模块来执行以下操作：</p><p>每次一行地从可读流获取输入。(例如 <code>process.stdin</code> 流, 在 Node.js 程序执行期间该流就是终端输入)</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> readline </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">readline</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createInterface</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">input</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> process</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">stdin</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">output</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> process</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">stdout</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">readline</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">question</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">What&#39;s your name?</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">name</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">你好, </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">}\`</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">readline</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">close</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// What&#39;s your name?Mochi</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Hello, Mochi</span></span>
<span class="line"></span></code></pre></div><p><a href="https://github.com/SBoudrias/Inquirer.js" target="_blank" rel="noreferrer">inquirer</a> 库提供了更完整更抽象的解决方案</p><h2 id="搭建-http-服务器" tabindex="-1">搭建 HTTP 服务器 <a class="header-anchor" href="#搭建-http-服务器" aria-hidden="true">#</a></h2><p>web 服务器就是启动了一个服务, 不停的监听这个端口上进来的 http 请求。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> http </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">http</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> server </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> http</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createServer</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">req</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">res</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setHeader</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Access-Control-Allow-Origin</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">http://127.0.0.1:5500</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">res</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">statusCode</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">200</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">end</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> port </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3000</span></span>
<span class="line"><span style="color:#A6ACCD;">server</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">listen</span><span style="color:#A6ACCD;">(port</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">\\x1b</span><span style="color:#C3E88D;">[32m%s</span><span style="color:#A6ACCD;">\\x1b</span><span style="color:#C3E88D;">[0m</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">服务运行在http://localhost:</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">port</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">上</span><span style="color:#89DDFF;">\`</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>创建 HTTP 服务器需要引入 http 模块, 服务器被设置为在指定的 3000 端口进行监听, 当服务器准备就绪时, listen 的回调函数会被调用。</p><p><code>http.createServer()</code> 传入的回调函数会在每次接收请求时被执行, 回调函数的参数分别是 <code>request</code> 和 <code>response</code></p><ul><li>requset 提供了请求的详细信息。通过它可以访问请求头和请求的数据</li><li>response 用于构造要返回给客户端的数据</li></ul><p>注：<code>http.createServer()</code> 传入回调函数相当于 <code>http.on(&#39;request&#39;, (req, res) =&gt; {})</code>。</p><p>request 中最有用的信息包括 method 和 url, get 请求的参数包含在 url 中, 如果是 post 请求需要 <code>req.on(&#39;data&#39;, chunk =&gt; {})</code> 监听传输数据, 数据传输可能是多次的, <code>req.on(&#39;end&#39;, () =&gt; {})</code> 监听数据传输完成。</p><blockquote><p>In order to support the full spectrum of possible HTTP applications, the Node.js HTTP API is very low-level. It deals with stream handling and message parsing only. It parses a message into headers and body but it does not parse the actual headers or the body.</p></blockquote><p>需要注意的是 post 请求 body 请求体数据解析方式的不同, formdata 数据使用 querystring 模块的 parse 方法, JSON 字符串使用 JSON 处理。</p><p>response 可使用：</p><ol><li><code>res.statusCode</code> 设置响应状态码, <code>res.statusMessage</code> 设置响应状态信息</li><li><code>res.setHeader()</code> 设置响应头信息</li><li><code>res.write()</code> 写入响应信息</li><li><code>res.end()</code> 结束 http 请求, 也可将响应信息直接传入 <code>res.end()</code> 中</li></ol><p>需要注意的是, 直接向 <code>res.write()</code> 或 <code>res.end()</code> 传入中文的话, 客户端接收是解析不了的, 也就是会乱码, 原因是没有设置响应数据类型。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setHeader</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Content-Type</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">text/plain;charset=utf-8</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>如果响应信息储存在文件中, 需要需要 fs 模块的 readFile 读取文件内容, 再写入 res 中。</p><h3 id="node-发送-http-请求" tabindex="-1">node 发送 HTTP 请求 <a class="header-anchor" href="#node-发送-http-请求" aria-hidden="true">#</a></h3><p>node.js 发送 http 请求是使用 http 模块的 request 方法, 与创建 HTTP 服务器中 &quot;request&quot; 事件处理函数中的 res 一样, 这里的返回数据也需要监听 &quot;data&quot; 和 &quot;end&quot; 事件。</p><p>当然最简单的还是使用 axios 库。</p><h2 id="路径模块" tabindex="-1">路径模块 <a class="header-anchor" href="#路径模块" aria-hidden="true">#</a></h2><p><a href="http://dev.nodejs.cn/learn/the-nodejs-path-module" target="_blank" rel="noreferrer">path</a> 模块提供了许多非常实用的函数来处理操作系统文件路径。</p><ul><li><code>path.basename()</code> : 返回路径的最后一部分, 第二个参数可以过滤掉文件的扩展名</li><li><code>path.dirname()</code> : 返回路径的目录部分</li><li><code>path.extname()</code> : 返回路径的扩展名部分</li><li><code>path.isAbsolute()</code> : 如果是绝对路径，则返回 true</li><li><code>path.join()</code> : 连接路径的两个或多个部分</li><li><code>path.normalize()</code> : 当包含类似 <code>.</code>、<code>..</code> 或双斜杠等相对的说明符时，则尝试计算实际的路径：</li><li><code>path.parse()</code> : 解析对象的路径为组成其的片段, 如：<code>{root: &#39;/&#39;,dir: &#39;/users&#39;,base: &#39;test.txt&#39;,ext: &#39;.txt&#39;,name: &#39;test&#39;}</code></li><li><code>path.relative()</code> : 接受 2 个路径作为参数。 基于当前工作目录，返回从第一个路径到第二个路径的相对路径</li><li><code>path.resolve()</code> : 获得相对路径的绝对路径计算</li></ul><p><code>path.sep</code> 是路径段分隔符, 在 Windows 上是 <code>\\</code>, 在 Linux/macOs 上是 <code>/</code>。<code>path.delimiter</code> 是路径定界符, 在 Windows 上是 <code>;</code>, 在 Linux/macOs 上是 <code>:</code>。</p><h2 id="文件系统模块" tabindex="-1">文件系统模块 <a class="header-anchor" href="#文件系统模块" aria-hidden="true">#</a></h2><p><a href="http://dev.nodejs.cn/learn/the-nodejs-fs-module" target="_blank" rel="noreferrer">fs</a> 模块提供了许多非常实用的函数来访问文件系统。</p><p>注：如果需要对文件/文件夹进行操作, 可以安装 <a href="https://www.npmjs.com/package/fs-extra" target="_blank" rel="noreferrer">fs-extra</a> 模块, 它是 fs 模块的直接替代品, 并在此之上提供了更多的功能。</p><ul><li><code>fs.access()</code> : 检查文件是否存在，以及 Node.js 是否有权限访问。</li><li><code>fs.appendFile()</code> : 追加数据到文件。如果文件不存在，则创建文件。</li><li><code>fs.chmod()</code> : 更改文件（通过传入的文件名指定）的权限。相关方法：<code>fs.lchmod()</code>、<code>fs.fchmod()</code>。</li><li><code>fs.chown()</code> : 更改文件（通过传入的文件名指定）的所有者和群组。相关方法：<code>fs.fchown()</code>、<code>fs.lchown()</code>。</li><li><code>fs.close()</code> : 关闭文件描述符。</li><li><code>fs.copyFile()</code> : 拷贝文件。</li><li><code>fs.createReadStream()</code> : 创建可读的文件流。</li><li><code>fs.createWriteStream()</code> : 创建可写的文件流。</li><li><code>fs.link()</code> : 新建指向文件的硬链接。</li><li><code>fs.mkdir()</code> : 新建文件夹。</li><li><code>fs.mkdtemp()</code> : 创建临时目录。</li><li><code>fs.open()</code> : 设置文件模式。</li><li><code>fs.readdir()</code> : 读取目录的内容。</li><li><code>fs.readFile()</code> : 读取文件的内容。相关方法：<code>fs.read()</code>。</li><li><code>fs.readlink()</code> : 读取符号链接的值。</li><li><code>fs.realpath()</code> : 将相对的文件路径指针（.、..）解析为完整的路径。</li><li><code>fs.rename()</code> : 重命名文件或文件夹。</li><li><code>fs.rmdir()</code> : 删除文件夹。</li><li><code>fs.stat()</code> : 返回文件（通过传入的文件名指定）的状态。相关方法：<code>fs.fstat()</code>、<code>fs.lstat()</code>。</li><li><code>fs.symlink()</code> : 新建文件的符号链接。</li><li><code>fs.truncate()</code> : 将传递的文件名标识的文件截断为指定的长度。相关方法：<code>fs.ftruncate()</code>。</li><li><code>fs.unlink()</code> : 删除文件或符号链接。</li><li><code>fs.unwatchFile()</code> : 停止监视文件上的更改。</li><li><code>fs.utimes()</code> : 更改文件（通过传入的文件名指定）的时间戳。相关方法：<code>fs.futimes()</code>。</li><li><code>fs.watchFile()</code> : 开始监视文件上的更改。相关方法：<code>fs.watch()</code>。</li><li><code>fs.writeFile()</code> : 将数据写入文件。相关方法：<code>fs.write()</code>。</li></ul><p>fs 所有的方法默认情况下都是异步的，但是在在后面加上 Sync 也可以同步地工作, 如 <code>fs.readFileSync()</code>。</p><p>可以借助 util 模块中的 promisify 方法对 fs 模块回调函数形式的异步方法转化为 promise 的形式：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> promisify </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">util</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> readFilePromisify </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">promisify</span><span style="color:#A6ACCD;">(fs</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">readFile)</span></span>
<span class="line"></span></code></pre></div><p>Node.js 10 以上也有对 fs 模块 promise API 的支持, 如：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> fs </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">fs/promises</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><h3 id="文件属性" tabindex="-1">文件属性 <a class="header-anchor" href="#文件属性" aria-hidden="true">#</a></h3><p>每个文件都带有一组详细信息, 可以使用 fs 模块提供的 <code>stat()</code> 方法查看。文件信息中常用的如下：</p><ul><li>stat.isFile() : 是否是文件</li><li>stat.isDirectory() : 是否是目录</li><li>stat.isSymbolicLink() : 是否符号链接</li><li>stat.size : 文件大小(字节为单位)</li></ul><h3 id="判断文件-文件夹是否存在" tabindex="-1">判断文件/文件夹是否存在 <a class="header-anchor" href="#判断文件-文件夹是否存在" aria-hidden="true">#</a></h3><p>可以使用 <code>fs.existsSync()</code> 判断文件/文件夹是否存在。</p><h3 id="读取文件" tabindex="-1">读取文件 <a class="header-anchor" href="#读取文件" aria-hidden="true">#</a></h3><p>Node.js 中读取文件最简单的方式是使用 <code>fs.readFile()</code> 方法, 向其传入文件路径、编码以及回调函数。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">fs</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">readFile</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./fetch.html</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">utf-8</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">err</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">data</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">err</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">err</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">chalk</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">yellow</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;">))</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><h3 id="写入-追加写入-文件" tabindex="-1">写入/追加写入 文件 <a class="header-anchor" href="#写入-追加写入-文件" aria-hidden="true">#</a></h3><p>Node.js 中写入文件最简单的方式是使用 <code>fs.writeFile()</code>, 如果文件不存在会先创建一个文件再写入。：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">fs</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">writeFile</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./test.txt</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">内容</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">err</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">err</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">err</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>如果文件已经存在 <code>fs.writeFile()</code> 会替换文件的内容, 如果想要向文件中追加内容, 可以先读取出来再与追加内容拼接重新写入文件。</p><p>将内容追加到文件末尾的便捷方法是 <code>fs.appendFile()</code>：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">fs</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">appendFile</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./test.txt</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">追加内容</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">err</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">err</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">err</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>写入文件方法都是在将全部内容写入文件之后才会将控制权返回给程序(在异步的版本中，这意味着执行回调)。在这种情况下，更好的选择是使用流写入文件的内容。</p><h3 id="删除文件" tabindex="-1">删除文件 <a class="header-anchor" href="#删除文件" aria-hidden="true">#</a></h3><p>可以使用 <code>fs.unlink()</code> 删除文件。</p><h3 id="创建新的文件夹" tabindex="-1">创建新的文件夹 <a class="header-anchor" href="#创建新的文件夹" aria-hidden="true">#</a></h3><p>可以使用 <code>fs.mkdir()</code> 或 <code>fs.mkdir()</code> 创建新的文件夹：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">fs</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">existsSync</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./dir</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">fs</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">existsSync</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./dir</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">))</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">fs</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">mkdirSync</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./dir</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="重命名文件或文件夹" tabindex="-1">重命名文件或文件夹 <a class="header-anchor" href="#重命名文件或文件夹" aria-hidden="true">#</a></h3><p>可以使用 <code>fs.rename</code> 重命名文件或文件夹：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">fs</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">renameSync</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./dir</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./newDir</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">err</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">err</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">err</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><h3 id="删除文件夹" tabindex="-1">删除文件夹 <a class="header-anchor" href="#删除文件夹" aria-hidden="true">#</a></h3><p>可以使用 <code>fs.rmdir()</code> 删除文件夹。</p><h3 id="读取目录内容" tabindex="-1">读取目录内容 <a class="header-anchor" href="#读取目录内容" aria-hidden="true">#</a></h3><p>可以使用 <code>fs.readdir()</code> 读取目录的内容, 注意『只是当前目录的文件和文件夹, 不包括孙子文件』, 并返回文件/文件夹的相对路径。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (fs</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">existsSync</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./dir</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">fs</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">readdir</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./dir</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">err</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">relativePath</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">err</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">err</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">relativePath</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div>`,132),p=[o];function c(t,r,i,d,y,D){return n(),a("div",null,p)}const A=s(e,[["render",c]]);export{C as __pageData,A as default};
