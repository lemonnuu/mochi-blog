import{_ as a,c as i,b as l,d as e,e as p,w as n,a as r,r as c,o}from"./app.9d7c8735.js";const k=JSON.parse('{"title":"TypeScript","titleTemplate":"前言","description":"","frontmatter":{"title":"TypeScript","titleTemplate":"前言"},"headers":[{"level":2,"title":"背景","slug":"背景","link":"#背景","children":[]},{"level":2,"title":"概念","slug":"概念","link":"#概念","children":[]},{"level":2,"title":"应用场景","slug":"应用场景","link":"#应用场景","children":[]}],"relativePath":"_NOTES/TypeScript/common/001_pre.md","lastUpdated":1678925421000}'),s={name:"_NOTES/TypeScript/common/001_pre.md"},_=r('<h1 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-hidden="true">#</a></h1><p>到如今, <a href="https://www.typescriptlang.org/" target="_blank" rel="noreferrer">TypeScript</a> 已经成为前端人必须掌握的技能之一。</p><p>那么, 为什么需要学习 TypeScript? TypeScript 究竟是什么呢?</p><h2 id="背景" tabindex="-1">背景 <a class="header-anchor" href="#背景" aria-hidden="true">#</a></h2><p>我们知道, JS 不同于传统的 C++、Java 等语言, 它只有在运行时才能发现某些错误, 比如:</p><ul><li>访问了一个对象没有的属性</li><li>调用一个函数却少传了参数</li><li>函数的返回值是个字符串但却把它当作数值使用了</li><li>...</li></ul><p>而 TypeScript 可以在编写代码的过程中, 就能发现上述错误, 非常的 nice。</p><h2 id="概念" tabindex="-1">概念 <a class="header-anchor" href="#概念" aria-hidden="true">#</a></h2><p>TypeScript 是 JavaScript 的超集, 拥有类型机制, 不能直接在浏览器环境运行, 而是需要提前编译成 JavaScript 代码。</p><ul><li>超集 : JS 有的 TS 要有, JS 没有的 TS 也有。在语法标准方面, TypeScript 是略微领先的, 比如类的私有属性和方法。</li><li>类型 : 不同于 JS 的动态类型, TS 属于静态类型, 配合编辑器的静态类型校验能力, 既可做到执行前报错。</li></ul>',10),h=r('<h2 id="应用场景" tabindex="-1">应用场景 <a class="header-anchor" href="#应用场景" aria-hidden="true">#</a></h2><p>虽然使用 TypeScript 编写代码很爽, 但是除了逻辑代码外, 还需维护类型的声明。某种程度上会加大开发人员的心智负担, 所以也切勿为了技术而技术, 技术服务于业务。</p><p>简单的说, 以下类型的项目适合使用 TypeScript 开发:</p><ul><li>需要多人合作开发的项目(人数 &gt; 10)</li><li>需要经常更新迭代的项目</li><li>开发人员频繁更换的项目</li><li>开源项目, 尤其是工具函数或组件库</li><li>对代码质量要求很高的项目</li></ul><p>下面是一些用 TypeScript 编写的广为人知的项目:</p><ul><li><a href="https://github.com/microsoft/vscode" target="_blank" rel="noreferrer">VSCode</a></li><li><a href="https://reactjs.org/" target="_blank" rel="noreferrer">React</a> &amp; <a href="https://cn.vuejs.org/" target="_blank" rel="noreferrer">Vue3.0</a> &amp; <a href="https://angular.cn/" target="_blank" rel="noreferrer">Angular</a></li><li><a href="https://ant.design/index-cn" target="_blank" rel="noreferrer">Ant Design</a></li></ul><hr><p>下面就让我们一起来攻克 TypeScript 吧! notes 分为 n 个章节:</p>',8);function d(S,T,u,f,g,m){const t=c("f");return o(),i("div",null,[_,l("p",null,[e("可以说, TS ≈ JS + Static Type Checker(静态类型校验能力)。而 Static Checker 是编辑器(VSCode)的工作, 所以, TS 核心需要学习的就是"),p(t,null,{default:n(()=>[e("静态类型")]),_:1}),e("。")]),h])}const b=a(s,[["render",d]]);export{k as __pageData,b as default};
