import{_ as s,c as a,o as n,a as l}from"./app.2605d047.js";const h=JSON.parse('{"title":"npx","titleTemplate":false,"description":"","frontmatter":{"date":"2023-01-08 10:22:33","title":"npx","titleTemplate":false,"author":"Mochi","outline":[2,4],"categories":["post"],"tags":["node"]},"headers":[{"level":2,"title":"npx","slug":"npx-1","link":"#npx-1","children":[{"level":3,"title":"使用不同版本的 node","slug":"使用不同版本的-node","link":"#使用不同版本的-node","children":[]},{"level":3,"title":"安装多模块","slug":"安装多模块","link":"#安装多模块","children":[]},{"level":3,"title":"运行多指令","slug":"运行多指令","link":"#运行多指令","children":[]},{"level":3,"title":"执行 github 源码","slug":"执行-github-源码","link":"#执行-github-源码","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"relativePath":"_POSTS/node/003_npx.md","lastUpdated":1673163682000}'),p={name:"_POSTS/node/003_npx.md"},o=l(`<h1 id="npx" tabindex="-1">npx <a class="header-anchor" href="#npx" aria-hidden="true">#</a></h1><p>如果用过 Node.js, 那一定用过 npm, 但 npx 又是什么呢？</p><hr><p>npm 是随 Node.js 一同安装的包管理工具, 通过它可本地或全局安装依赖库并管理其版本。</p><p>npm 本身不会运行任何库, 当 npm 执行安装库的指令时(npm install xxx), npm 会创建指向它们的链接:</p><ol><li>全局安装会在全局安装的 npm 文件夹下创建链接, 可以用 <code>npm root -g</code> 命令来查看 npm 所在文件夹, npm 安装时会自动配置 $PATH 环境变量, 指向 npm 所在文件夹, 所以通过 npm 安装某些命令行工具时, 只有全局安装终端才能识别相应命令, 局部安装识别不了。</li><li>局部安装会在工程目录的 <code>./node_modules/.bin/</code> 文件夹中创建链接</li></ol><p>当需要执行库时, 全局安装时终端能识别相应指令, 但局部安装的却有些繁琐:</p><ol><li>可以直接使用相对路径来调用安装的包</li></ol><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#82AAFF;">.</span><span style="color:#FFCB6B;">/node_modules/.bin/your-package</span></span>
<span class="line"></span></code></pre></div><ol start="2"><li>在 package.json 文件中添加脚本, 如</li></ol><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">webpack-demo</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">version</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">1.0.0</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">scripts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">your-package</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">your-package</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>然后运行指令</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">your-package</span></span>
<span class="line"></span></code></pre></div><p>这两种方式实际上是一样的, 只是 npm run 会自动添加 <code>./node_module/.bin/</code></p><p>只凭借 npm, 如果想要运行某些库, 不安装是不行的 😑 😑 😑</p><h2 id="npx-1" tabindex="-1">npx <a class="header-anchor" href="#npx-1" aria-hidden="true">#</a></h2><p>npm 从 5.2 版本开始, 增加了 npx 命令, 它是一个 npm 包的执行器 😍 😍 😍</p><p>只要 npm 的版本在 5.2 以上可直接使用 npx 命令, 万一不能用, 建议升级一下 Node 版本, 也可直接安装 npx</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">npx</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-g</span></span>
<span class="line"></span></code></pre></div><div class="danger custom-block"><p class="custom-block-title">DANGER</p><p>npx 的原理很简单, 在运行的时候, 首先会检查工程目录 <code>./node_modules/.bin</code> 路径, 再检查环境变量 <code>$PATH</code> 查看命令是否存在, 如果存在则会使用相应的本地模块, 当这两个路径都不能找到相应命令时, 会下载远程模块至临时目录, 在使用完毕之后删除。</p></div><p>由于 npx 会检查环境变量 <code>$PATH</code>, 所以系统命令也可以调用</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 等同于 ls</span></span>
<span class="line"><span style="color:#FFCB6B;">npx</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ls</span></span>
<span class="line"></span></code></pre></div><p>需要注意的是, Bash 内置的命令不在 <code>$PATH</code> 里, 所以不能用。比如, <code>cd</code> 是 Bash 命令, 因此不能用 <code>npx cd</code></p><p>利用 npx, 可以临时安装可执行依赖包, 不用全局安装, 避免全局污染, 例如在本地没有安装 <code>http-server</code> 模块的情况下, 可以随时启动一个 Web 服务 🐂 🐃 🐄</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">npx</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">http-server</span></span>
<span class="line"></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>如果想让 npx 强制使用本地模块, 不下载远程模块, 可以使用 <code>--no-install</code> 参数。如果本地不存在该模块, 就会报错。</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">npx</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--no-install</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">http-server</span></span>
<span class="line"></span></code></pre></div><p>反过来, 如果想忽略本地模块, 强制使用安装远程模块, 可以使用 <code>--ignore-existing</code> 参数。</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">npx</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--ignore-existing</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">create-react-app</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">my-react-app</span></span>
<span class="line"></span></code></pre></div></div><h3 id="使用不同版本的-node" tabindex="-1">使用不同版本的 node <a class="header-anchor" href="#使用不同版本的-node" aria-hidden="true">#</a></h3><p>利用 npx 可以下载模块的特点, 还可以指定某个版本的 Node 运行脚本, 在某些场景下, 可利用它切换 Node 版本</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">npx</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">node@17.7.2</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-v</span></span>
<span class="line"></span></code></pre></div><h3 id="安装多模块" tabindex="-1">安装多模块 <a class="header-anchor" href="#安装多模块" aria-hidden="true">#</a></h3><p>npx 的 <code>-p</code> 参数用于指定 npx 所要安装的模块, 对于需要安装多个模块的场景很有用</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">npx</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-p</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">lolcatjs</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-p</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">cowsay</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">command</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#FFCB6B;">npx</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-p</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">node@17.7.2</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">node</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-v</span></span>
<span class="line"></span></code></pre></div><h3 id="运行多指令" tabindex="-1">运行多指令 <a class="header-anchor" href="#运行多指令" aria-hidden="true">#</a></h3><p>在安装多模块时, 默认情况下, 只有第一个可执行项会使用 npx 安装的模块, 后面的可执行项还是会交给 Shell 解释。</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">npx</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-p</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">lolcatjs</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-p</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">cowsay</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">cowsay hello | lolcatjs</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">       </span><span style="color:#676E95;font-style:italic;"># 报错</span></span>
<span class="line"></span></code></pre></div><p>上面代码中, <code>cowsay hello | lolcatjs</code> 执行时会报错, 原因是第一项 <code>cowsay</code> 由 npx 解释, 而第二项命令 <code>lolcatjs</code> 由 Shell 解释, 但是 <code>lolcatjs</code> 并没有全局安装, 所以报错。</p><p><code>-c</code> 参数可以将所有的命令都用 npx 解释</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">npx</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-p</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">lolcatjs</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-p</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">cowsay</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-c</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">cowsay hello | lolcatjs</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span></code></pre></div><h3 id="执行-github-源码" tabindex="-1">执行 github 源码 <a class="header-anchor" href="#执行-github-源码" aria-hidden="true">#</a></h3><p>npx 还可以执行 Github 上面的模块代码, 但需要注意的是, 远程代码必须是一个模块, 即必须包含 <code>package.json</code> 和 入口脚本</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">npx</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">github地址</span></span>
<span class="line"></span></code></pre></div><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-hidden="true">#</a></h2><p>npx 是一个 npm 包的执行器, 在运行的时候, 首先会检查工程目录 <code>./node_modules/.bin</code> 路径, 再检查环境变量 <code>$PATH</code> 查看命令是否存在, 如果存在则会使用相应的本地模块, 当这两个路径都不能找到相应命令时, 会下载远程模块至临时目录, 在使用完毕之后删除。</p>`,43),e=[o];function c(t,r,i,d,C,y){return n(),a("div",null,e)}const A=s(p,[["render",c]]);export{h as __pageData,A as default};
