import{_ as l,c as s,o as a,a as n}from"./app.997506a9.js";const e="/mochi-blog/assets/001_tcp.32163654.svg",o="/mochi-blog/assets/002_websocket.882575c5.png",u=JSON.parse('{"title":"综合强化","description":"","frontmatter":{},"headers":[{"level":2,"title":"从输入 URL 到渲染出页面的整个过程?","slug":"从输入-url-到渲染出页面的整个过程","link":"#从输入-url-到渲染出页面的整个过程","children":[]},{"level":2,"title":"性能优化方案?","slug":"性能优化方案","link":"#性能优化方案","children":[]},{"level":2,"title":"请描述一下 TCP 的三次握手和四次挥手?","slug":"请描述一下-tcp-的三次握手和四次挥手","link":"#请描述一下-tcp-的三次握手和四次挥手","children":[]},{"level":2,"title":"HTTP 跨域请求时为何发送 options 请求","slug":"http-跨域请求时为何发送-options-请求","link":"#http-跨域请求时为何发送-options-请求","children":[]},{"level":2,"title":"WebSocket 和 HTTP 协议有什么区别?","slug":"websocket-和-http-协议有什么区别","link":"#websocket-和-http-协议有什么区别","children":[]},{"level":2,"title":"WebSocket 和 HTTP 长轮询的区别?","slug":"websocket-和-http-长轮询的区别","link":"#websocket-和-http-长轮询的区别","children":[]},{"level":2,"title":"网页重绘 repaint 和重排 reflow 有什么区别?","slug":"网页重绘-repaint-和重排-reflow-有什么区别","link":"#网页重绘-repaint-和重排-reflow-有什么区别","children":[]},{"level":2,"title":"如何实现网页多标签 tab 通讯?","slug":"如何实现网页多标签-tab-通讯","link":"#如何实现网页多标签-tab-通讯","children":[]},{"level":2,"title":"如何实现网页和 iframe 之间的通讯?","slug":"如何实现网页和-iframe-之间的通讯","link":"#如何实现网页和-iframe-之间的通讯","children":[]},{"level":2,"title":"H5 页面如何进行首屏优化?","slug":"h5-页面如何进行首屏优化","link":"#h5-页面如何进行首屏优化","children":[]}],"relativePath":"_NOTES/Soul Torture/Sublimation/001_comprehensive.md","lastUpdated":1676598576000}'),p={name:"_NOTES/Soul Torture/Sublimation/001_comprehensive.md"},t=n('<h1 id="综合强化" tabindex="-1">综合强化 <a class="header-anchor" href="#综合强化" aria-hidden="true">#</a></h1><nav class="table-of-contents"><ul><li><a href="#从输入-url-到渲染出页面的整个过程">从输入 URL 到渲染出页面的整个过程?</a></li><li><a href="#性能优化方案">性能优化方案?</a></li><li><a href="#请描述一下-tcp-的三次握手和四次挥手">请描述一下 TCP 的三次握手和四次挥手?</a></li><li><a href="#http-跨域请求时为何发送-options-请求">HTTP 跨域请求时为何发送 options 请求</a></li><li><a href="#websocket-和-http-协议有什么区别">WebSocket 和 HTTP 协议有什么区别?</a></li><li><a href="#websocket-和-http-长轮询的区别">WebSocket 和 HTTP 长轮询的区别?</a></li><li><a href="#网页重绘-repaint-和重排-reflow-有什么区别">网页重绘 repaint 和重排 reflow 有什么区别?</a></li><li><a href="#如何实现网页多标签-tab-通讯">如何实现网页多标签 tab 通讯?</a></li><li><a href="#如何实现网页和-iframe-之间的通讯">如何实现网页和 iframe 之间的通讯?</a></li><li><a href="#h5-页面如何进行首屏优化">H5 页面如何进行首屏优化?</a></li></ul></nav><h2 id="从输入-url-到渲染出页面的整个过程" tabindex="-1">从输入 URL 到渲染出页面的整个过程? <a class="header-anchor" href="#从输入-url-到渲染出页面的整个过程" aria-hidden="true">#</a></h2><div class="tip custom-block"><p class="custom-block-title">答案</p><p>加载资源:</p><ol><li>浏览器判断 URL 是否符合规范, 再进行 URL 编码</li><li>DNS 解析 : 域名 -&gt; IP 地址</li><li>浏览器根据 IP 地址向服务器发起 HTTP 请求</li><li>服务器处理 HTTP 请求, 并返回给浏览器</li></ol><p>渲染过程:</p><ol><li>根据 HTML 代码生成 DOM Tree</li><li>根据 CSS 代码生成 CSSOM (具体看 CSS 书写位置, 建议放上面先渲染 CSSOM)</li><li>将 DOM Tree 和 CSSOM 整合形成 Render Tree</li><li>根据 Render Tree 渲染页面</li><li>遇到 &lt;script&gt; 则暂停渲染, 优先加载并执行 JS 代码, 完成再继续</li><li>直至把 Render Tree 渲染完成</li></ol></div><h2 id="性能优化方案" tabindex="-1">性能优化方案? <a class="header-anchor" href="#性能优化方案" aria-hidden="true">#</a></h2><div class="info custom-block"><p class="custom-block-title">前情提要</p><p>性能优化原则: (适用于所有编程的性能优化 —— 空间换时间)</p><ul><li>多使用内存、缓存或其它方法</li><li>减少 CPU 计算量, 减少网络加载耗时</li></ul></div><div class="tip custom-block"><p class="custom-block-title">答案</p><ul><li>让加载更快 <ul><li>减少资源体积: 压缩代码、Tree Shaking</li><li>升级 HTTP/2.0, 合并代码并进行合理的 Code Spliting</li><li>一些小图片可以 base64 直接嵌入, 减少请求</li><li>使用 CDN 加速</li></ul></li><li>让渲染更快 <ul><li>CSS 放在 head 里, JS 放 body 最下面, 或合理使用 defer 与 async (先执行 CSS, 最后执行 JS)</li><li>对静态资源进行缓存</li><li>图片懒加载, 上滑加载更多</li><li>对 DOM 查询进行缓存</li><li>需要频繁操作 DOM 时, 合并到一起插入 DOM 结构</li><li>节流 throttle 防抖 debounce</li></ul></li></ul></div><h2 id="请描述一下-tcp-的三次握手和四次挥手" tabindex="-1">请描述一下 TCP 的三次握手和四次挥手? <a class="header-anchor" href="#请描述一下-tcp-的三次握手和四次挥手" aria-hidden="true">#</a></h2><div class="info custom-block"><p class="custom-block-title">前情提要</p><p>为什么 TCP 需要进行三次握手? 确保双方都有收发消息的能力。</p></div><p><img src="'+e+`" alt=""></p><div class="tip custom-block"><p class="custom-block-title">答案</p><p>TCP 三次握手:</p><ul><li>Client 发包, Server 接收 (Server: 有 Client 找我)</li><li>Server 发包, Client 接收 (Client: Server 已经收到信息了)</li><li>Client 发包, Server 接收 (Server: Client 要准备发送了)</li></ul><p>TCP 四次挥手:</p><ul><li>Client 发包, Server 接收 (Server: Client 已请求结束)</li><li>Server 发包, Client 接收 (Client: Server 已收到, 我等待它关闭)</li><li>Server 发包, Client 接收 (Client: Server 此时可以关闭连接了)</li><li>Client 发包, Server 接收 (Server: 可以关闭了)</li></ul></div><h2 id="http-跨域请求时为何发送-options-请求" tabindex="-1">HTTP 跨域请求时为何发送 options 请求 <a class="header-anchor" href="#http-跨域请求时为何发送-options-请求" aria-hidden="true">#</a></h2><div class="tip custom-block"><p class="custom-block-title">答案</p><ul><li>options 请求, 是跨域请求之前的预检查, 旨在查询 server 端支持哪些请求方法等</li><li>它是浏览器自行发起的, 无需我们干预, 不会影响实际的功能</li></ul></div><h2 id="websocket-和-http-协议有什么区别" tabindex="-1">WebSocket 和 HTTP 协议有什么区别? <a class="header-anchor" href="#websocket-和-http-协议有什么区别" aria-hidden="true">#</a></h2><div class="info custom-block"><p class="custom-block-title">前置知识</p><p>WebSocket:</p><ul><li>支持端对端通讯</li><li>可以由 client 发起, 也可以由 server 发起</li><li>用于消息通知、直播间讨论区、聊天室、协同编辑</li></ul><p>WebSocket 连接过程:</p><ul><li>先发起一个 HTTP 请求</li><li>成功之后再升级到 WebSocket 协议, 再通讯</li></ul></div><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-HrwQt" id="tab-enGpQtI" checked="checked"><label for="tab-enGpQtI">客户端</label><input type="radio" name="group-HrwQt" id="tab-Y4suRWK"><label for="tab-Y4suRWK">服务端</label></div><div class="blocks"><div class="language-js active"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> ws </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">WebSocket</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">ws://127.0.0.1:3000</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">ws</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onopen</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">opend</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">ws</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">send</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">client opend</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">ws</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onmessage</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">event</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">收到了信息: </span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">event</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> WebSocketServer </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">ws</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> wsServer </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">WebSocketServer</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">port</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3000</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">wsServer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">on</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">connection</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">ws</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">connected</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">ws</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">on</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">message</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">msg</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">收到了信息</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">msg</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toString</span><span style="color:#F07178;">())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">setTimeout</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">ws</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">send</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">服务端收到了信息</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">msg</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toString</span><span style="color:#F07178;">())</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2000</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div></div></div><p><img src="`+o+'" alt="websocket"></p><div class="tip custom-block"><p class="custom-block-title">答案</p><ul><li>WebSocket 协议名是 ws:// , 可双端发起请求</li><li>WebSocket 没有跨域限制</li><li>通过 send 和 onmessage 通讯(HTTP 通过 req 和 res)</li></ul></div><div class="info custom-block"><p class="custom-block-title">拓展</p><ul><li>ws 可升级为 wss(像 https)</li><li>实际项目推荐使用 <a href="http://socket.io" target="_blank" rel="noreferrer">socket.io</a>, API 更简洁</li></ul></div><h2 id="websocket-和-http-长轮询的区别" tabindex="-1">WebSocket 和 HTTP 长轮询的区别? <a class="header-anchor" href="#websocket-和-http-长轮询的区别" aria-hidden="true">#</a></h2><div class="tip custom-block"><p class="custom-block-title">答案</p><ul><li>WebSocket 是双端通信</li><li>而 HTTP 长轮询本质还是从客户端发出消息, 只不过处理 timeout, 超时之后重新发起请求(轮询)</li></ul></div><h2 id="网页重绘-repaint-和重排-reflow-有什么区别" tabindex="-1">网页重绘 repaint 和重排 reflow 有什么区别? <a class="header-anchor" href="#网页重绘-repaint-和重排-reflow-有什么区别" aria-hidden="true">#</a></h2><div class="tip custom-block"><p class="custom-block-title">答案</p><ul><li>重绘 <ul><li>元素外观改变, 如颜色、背景色</li><li>但元素的尺寸、定位不变, 不会影响其它元素的位置</li></ul></li><li>重排 <ul><li>重新计算尺寸和布局, 可能会影响其它元素的位置</li><li>如元素高度增加, 可能使相邻元素位置下移</li></ul></li></ul><p>重排比重绘的影响更大, 消耗也更大。所以, 要尽量避免无意义的重排。</p></div><div class="info custom-block"><p class="custom-block-title">减少重排的方法</p><ul><li>集中修改样式, 或直接切换 css, class</li><li>修改之前先设置 display: none, 脱离文档流</li><li>使用 BFC 特性, 不影响其它元素位置</li><li>频繁触发(resize, scroll) 使用节流和防抖</li><li>使用 createDocumentFragment 批量操作 DOM</li><li>优化动画, 使用 CSS3 和 requestAnimationFrame</li></ul></div><h2 id="如何实现网页多标签-tab-通讯" tabindex="-1">如何实现网页多标签 tab 通讯? <a class="header-anchor" href="#如何实现网页多标签-tab-通讯" aria-hidden="true">#</a></h2><div class="tip custom-block"><p class="custom-block-title">答案</p><ol><li>使用 WebSocket <ul><li>无跨域限制</li><li>需要服务端支持, 成本高</li></ul></li><li>使用 localStorage 通讯 (推荐) <ul><li>同域的 A B 两个页面</li><li>A 页面设置 localStorage</li><li>B 页面可监听到 localStorage 值的修改</li></ul></li><li>通过 shareWorker 通讯 (调式不方便, 不兼容 IE) <ul><li>ShareWorker 是 WebWorker 的一种</li><li>WebWorker 可开启子进程执行 JS, 但不能操作 DOM</li><li>ShareWorker 可单独开启一个进程, 用于同域页面通讯</li></ul></li></ol></div><h2 id="如何实现网页和-iframe-之间的通讯" tabindex="-1">如何实现网页和 iframe 之间的通讯? <a class="header-anchor" href="#如何实现网页和-iframe-之间的通讯" aria-hidden="true">#</a></h2><div class="tip custom-block"><p class="custom-block-title">答案</p><ul><li>使用 postMessage 通讯</li><li>注意跨域的限制和判断</li></ul></div><h2 id="h5-页面如何进行首屏优化" tabindex="-1">H5 页面如何进行首屏优化? <a class="header-anchor" href="#h5-页面如何进行首屏优化" aria-hidden="true">#</a></h2><p>:::前置知识</p><ul><li>路由懒加载 <ul><li>只适用于 SPA</li><li>路由拆分, 优先保证首页加载</li></ul></li><li>服务端渲染 SSR <ul><li>传统的前后端分离(SPA)渲染页面的过程复杂</li><li>SSR 渲染页面过程简单, 性能好</li><li>如果是纯 H5 页面, SSR 是性能优化的终极方案</li></ul></li><li>分页 <ul><li>针对列表页, 默认只展示第一页内容</li><li>上划加载更多</li></ul></li><li>图片懒加载 <ul><li>注意提前设置图片尺寸, 尽量只重绘不重排</li></ul></li><li>APP 预取 <ul><li>如果 H5 在 App WebView 中展示, 可使用 App 预取</li><li>用户访问列表页时, App 预加载文章首屏内容</li><li>用户进入 H5 页, 直接从 App 中获取内容, 瞬间展示首屏</li></ul></li><li>Hybird <ul><li>提前将 HTML、JS、CSS 下载到 APP 内部</li><li>在 App WebView 中使用 file:// 协议加载页面文件</li><li>再用 Ajax 获取内容并展示</li></ul></li></ul><p>:::</p><div class="tip custom-block"><p class="custom-block-title">答案</p><ul><li>路由懒加载</li><li>服务端渲染 SSR</li><li>分页</li><li>图片懒加载</li><li>APP 预取</li><li>Hybird</li></ul><p>服务端 SSR 是 H5 的终极优化方案(但成本也高), 移动端 H5 要结合 APP 能力去优化。</p></div>',33),i=[t];function c(r,F,D,y,C,A){return a(),s("div",null,i)}const h=l(p,[["render",c]]);export{u as __pageData,h as default};
