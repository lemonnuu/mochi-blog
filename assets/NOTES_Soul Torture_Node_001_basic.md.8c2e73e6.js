import{_ as e,c as o,o as l,a as t}from"./app.52f3574a.js";const v=JSON.parse('{"title":"Node 基础","description":"","frontmatter":{},"headers":[{"level":2,"title":"Node 的 Event Loop 机制?","slug":"node-的-event-loop-机制","link":"#node-的-event-loop-机制","children":[]}],"relativePath":"_NOTES/Soul Torture/Node/001_basic.md","lastUpdated":1675862808000}'),a={name:"_NOTES/Soul Torture/Node/001_basic.md"},i=t('<h1 id="node-基础" tabindex="-1">Node 基础 <a class="header-anchor" href="#node-基础" aria-hidden="true">#</a></h1><nav class="table-of-contents"><ul><li><a href="#node-的-event-loop-机制">Node 的 Event Loop 机制?</a></li></ul></nav><h2 id="node-的-event-loop-机制" tabindex="-1">Node 的 Event Loop 机制? <a class="header-anchor" href="#node-的-event-loop-机制" aria-hidden="true">#</a></h2><div class="info custom-block"><p class="custom-block-title">前情提要</p><p>Node 宏任务优先级:</p><ol><li>Timers : setTimeout setInterval</li><li>I/O callbacks - 处理网络、流、TCP 的错误回调</li><li>Idle, prepare - 闲置状态(node 内部使用)</li><li>Poll 轮询 - 执行 poll 中的 I/O 队列</li><li>Check 检查 - 存储 setImmediate 回调</li><li>Close callbacks - 关闭回调, 如 socket.on(&#39;close&#39;)</li></ol></div><div class="tip custom-block"><p class="custom-block-title">答案</p><ol><li>执行同步代码</li><li>执行微任务队列(process.nextTick() 队列先执行, 再执行其它微任务队列)</li><li>按顺序执行 6 个类型的微任务</li></ol></div>',5),s=[i];function c(n,d,r,_,p,h){return l(),o("div",null,s)}const m=e(a,[["render",c]]);export{v as __pageData,m as default};
