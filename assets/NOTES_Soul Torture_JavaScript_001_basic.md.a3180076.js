import{_ as o,c as n,b as s,d as l,e as t,w as i,a,r as c,o as p}from"./app.fdd5cd7f.js";const g=JSON.parse('{"title":"基础篇","description":"","frontmatter":{},"headers":[{"level":2,"title":"JavaScript 值类型和引用类型的区别?","slug":"javascript-值类型和引用类型的区别","link":"#javascript-值类型和引用类型的区别","children":[]},{"level":2,"title":"typeof 能判断的类型?","slug":"typeof-能判断的类型","link":"#typeof-能判断的类型","children":[]},{"level":2,"title":"哪些值是假值, 哪些值是真值?","slug":"哪些值是假值-哪些值是真值","link":"#哪些值是假值-哪些值是真值","children":[]},{"level":2,"title":"何时使用 === 何时使用 ==","slug":"何时使用-何时使用","link":"#何时使用-何时使用","children":[]},{"level":2,"title":"什么是作用域？什么是自由变量?","slug":"什么是作用域-什么是自由变量","link":"#什么是作用域-什么是自由变量","children":[]},{"level":2,"title":"什么是闭包？闭包的场景?","slug":"什么是闭包-闭包的场景","link":"#什么是闭包-闭包的场景","children":[]},{"level":2,"title":"如何准确获取数据类型?","slug":"如何准确获取数据类型","link":"#如何准确获取数据类型","children":[]},{"level":2,"title":"this 有几种赋值情况?","slug":"this-有几种赋值情况","link":"#this-有几种赋值情况","children":[]}],"relativePath":"_NOTES/Soul Torture/JavaScript/001_basic.md","lastUpdated":1675394738000}'),r={name:"_NOTES/Soul Torture/JavaScript/001_basic.md"},d=a('<h1 id="基础篇" tabindex="-1">基础篇 <a class="header-anchor" href="#基础篇" aria-hidden="true">#</a></h1><nav class="table-of-contents"><ul><li><a href="#javascript-值类型和引用类型的区别">JavaScript 值类型和引用类型的区别?</a></li><li><a href="#typeof-能判断的类型">typeof 能判断的类型?</a></li><li><a href="#哪些值是假值-哪些值是真值">哪些值是假值, 哪些值是真值?</a></li><li><a href="#何时使用-何时使用">何时使用 === 何时使用 ==</a></li><li><a href="#什么是作用域-什么是自由变量">什么是作用域？什么是自由变量?</a></li><li><a href="#什么是闭包-闭包的场景">什么是闭包？闭包的场景?</a></li><li><a href="#如何准确获取数据类型">如何准确获取数据类型?</a></li><li><a href="#this-有几种赋值情况">this 有几种赋值情况?</a></li></ul></nav><h2 id="javascript-值类型和引用类型的区别" tabindex="-1">JavaScript 值类型和引用类型的区别? <a class="header-anchor" href="#javascript-值类型和引用类型的区别" aria-hidden="true">#</a></h2><div class="info custom-block"><p class="custom-block-title">前情提要</p><p>首先需要明确的是 JavaScript 的原始类型和引用类型分别有哪些?</p><ul><li>原始类型 : string、boolean、number、undefined、null、symbol、bigint (7 种)</li><li>引用类型 : object、function、array...</li></ul></div>',4),v={class:"tip custom-block"},y=s("p",{class:"custom-block-title"},"答案",-1),h=s("li",null,"值类型实际存储在栈内存中, 引用类型实际存储在堆内存中",-1),u=s("li",null,"涉及拷贝时, 原始类型拷贝的是另外一个实例, 而引用类型只是拷贝了一个副本",-1),b=a('<div class="text-center border-2 mb-4 rounded-lg"><div class="border-b-2">栈内存</div><div class="flex border-b-2"><div class="flex-1 border-r-2">key</div><div class="flex-1">value</div></div><div class="flex border-b-2"><div class="flex-1 border-r-2">a</div><div class="flex-1">10</div></div><div class="flex border-b-2"><div class="flex-1 border-r-2">b</div><div class="flex-1">引用地址1</div></div><div class="flex"><div class="flex-1 border-r-2">...</div><div class="flex-1">...</div></div></div><div class="text-center border-2 rounded-lg"><div class="flex border-b-2"><div class="flex-1 border-r-2">...</div><div class="flex-1">...</div></div><div class="flex border-b-2"><div class="flex-1 border-r-2">引用地址1</div><div class="flex-1">{age: 10}</div></div><div class="flex border-b-2"><div class="flex-1 border-r-2">key</div><div class="flex-1">value</div></div><div>堆内存</div></div>',2),f=a(`<h2 id="typeof-能判断的类型" tabindex="-1">typeof 能判断的类型? <a class="header-anchor" href="#typeof-能判断的类型" aria-hidden="true">#</a></h2><div class="info custom-block"><p class="custom-block-title">前情提要</p><p>typeof 可以判断出 string、boolean、number、undefined、symbol、bigint、object、function。</p></div><div class="tip custom-block"><p class="custom-block-title">答案</p><p>typeof 可以用于判断除 null 以外的原始类型以及函数, 特别注意的是, <code>typeof null === &#39;object&#39;</code></p></div><h2 id="哪些值是假值-哪些值是真值" tabindex="-1">哪些值是假值, 哪些值是真值? <a class="header-anchor" href="#哪些值是假值-哪些值是真值" aria-hidden="true">#</a></h2><div class="tip custom-block"><p class="custom-block-title">答案</p><ol><li>除了 6 个假值以外的值都为真值</li><li>假值: false、&#39;&#39;(空字符串)、0、NaN、null、undefined</li></ol></div><h2 id="何时使用-何时使用" tabindex="-1">何时使用 === 何时使用 == <a class="header-anchor" href="#何时使用-何时使用" aria-hidden="true">#</a></h2><div class="tip custom-block"><p class="custom-block-title">答案</p><ol><li>除了 == null 之外, 其它都一律用全等操作符（===）</li><li>a == null 相当于 a === null || a === undefined</li></ol></div><h2 id="什么是作用域-什么是自由变量" tabindex="-1">什么是作用域？什么是自由变量? <a class="header-anchor" href="#什么是作用域-什么是自由变量" aria-hidden="true">#</a></h2><div class="tip custom-block"><p class="custom-block-title">答案</p><p>变量的查找规则就是作用域, 当前词法作用域没有定义却使用的变量就是自由变量。</p></div><div class="info custom-block"><p class="custom-block-title">拓展</p><ul><li>作用域分为词法作用域和动态作用域(this)</li><li>词法作用域又分为全局作用域、函数作用域和块级作用域</li><li>var 定义的变量含有全局作用域、函数作用域</li><li>let 或 const 定义的变量含有全局作用域、函数作用域和块级作用域</li></ul></div><h2 id="什么是闭包-闭包的场景" tabindex="-1">什么是闭包？闭包的场景? <a class="header-anchor" href="#什么是闭包-闭包的场景" aria-hidden="true">#</a></h2><div class="tip custom-block"><p class="custom-block-title">答案</p><ol><li>无论以哪种方式对函数类型的值进行传递, 就会产生闭包。</li><li>闭包的表现形式是函数定义时所在的作用域和执行时所在的作用域不一致。</li><li>场景： <ul><li>只要使用了回调函数就是闭包, 比如定时器、事件监听器、Ajax 等</li><li>模块导出函数类型的值</li></ul></li></ol></div><h2 id="如何准确获取数据类型" tabindex="-1">如何准确获取数据类型? <a class="header-anchor" href="#如何准确获取数据类型" aria-hidden="true">#</a></h2><div class="tip custom-block"><p class="custom-block-title">答案</p><p>使用 Object.prototype.toString.call() 获取。</p></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getType</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">target</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 注意：不要弄成了 Object.toString.call()</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 只能使用 Object.prototype.toString.call()</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">originType</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">toString</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">target</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">spaceIndex</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">originType</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">indexOf</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">originType</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">slice</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">spaceIndex</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toLowerCase</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="this-有几种赋值情况" tabindex="-1">this 有几种赋值情况? <a class="header-anchor" href="#this-有几种赋值情况" aria-hidden="true">#</a></h2><p>欠一篇文章, 写一篇这个</p>`,17);function F(_,D,A,C,x,m){const e=c("un");return p(),n("div",null,[d,s("div",v,[y,s("ol",null,[h,s("li",null,[l("对于值类型, 变量存储的是实际的值。而对于引用类型, 变量存储的是引用地址, 统一放入"),t(e,null,{default:i(()=>[l("栈内存")]),_:1}),l(", 其引用地址可映射到实际存储的堆内存中")]),u]),b]),f])}const T=o(r,[["render",F]]);export{g as __pageData,T as default};
