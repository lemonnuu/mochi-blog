import{_ as e}from"./chunks/001_event-loop.912a5bef.js";import{_ as l,c as a,o as i,a as o}from"./app.52f3574a.js";const g=JSON.parse('{"title":"进阶练习","description":"","frontmatter":{},"headers":[{"level":2,"title":"event loop (事件循环/事件轮询)的机制是怎样的?","slug":"event-loop-事件循环-事件轮询-的机制是怎样的","link":"#event-loop-事件循环-事件轮询-的机制是怎样的","children":[]},{"level":2,"title":"什么是宏任务和微任务, 两者有什么区别?","slug":"什么是宏任务和微任务-两者有什么区别","link":"#什么是宏任务和微任务-两者有什么区别","children":[]},{"level":2,"title":"实现跨域的常见方式及原理?","slug":"实现跨域的常见方式及原理","link":"#实现跨域的常见方式及原理","children":[]},{"level":2,"title":"cookie、localStorage 和 sessionStorage 的区别","slug":"cookie、localstorage-和-sessionstorage-的区别","link":"#cookie、localstorage-和-sessionstorage-的区别","children":[]},{"level":2,"title":"Ajax、Fetch 和 Axios 有什么区别?","slug":"ajax、fetch-和-axios-有什么区别","link":"#ajax、fetch-和-axios-有什么区别","children":[]},{"level":2,"title":"垃圾回收机制?","slug":"垃圾回收机制","link":"#垃圾回收机制","children":[]},{"level":2,"title":"JS 内存泄漏如何检测?场景有哪些?","slug":"js-内存泄漏如何检测-场景有哪些","link":"#js-内存泄漏如何检测-场景有哪些","children":[]},{"level":2,"title":"闭包是内存泄漏嘛?","slug":"闭包是内存泄漏嘛","link":"#闭包是内存泄漏嘛","children":[]}],"relativePath":"_NOTES/Soul Torture/JavaScript/004_advanced.md","lastUpdated":1675862808000}'),s={name:"_NOTES/Soul Torture/JavaScript/004_advanced.md"},t=o('<h1 id="进阶练习" tabindex="-1">进阶练习 <a class="header-anchor" href="#进阶练习" aria-hidden="true">#</a></h1><nav class="table-of-contents"><ul><li><a href="#event-loop-事件循环-事件轮询-的机制是怎样的">event loop (事件循环/事件轮询)的机制是怎样的?</a></li><li><a href="#什么是宏任务和微任务-两者有什么区别">什么是宏任务和微任务, 两者有什么区别?</a></li><li><a href="#实现跨域的常见方式及原理">实现跨域的常见方式及原理?</a></li><li><a href="#cookie、localstorage-和-sessionstorage-的区别">cookie、localStorage 和 sessionStorage 的区别</a></li><li><a href="#ajax、fetch-和-axios-有什么区别">Ajax、Fetch 和 Axios 有什么区别?</a></li><li><a href="#垃圾回收机制">垃圾回收机制?</a></li><li><a href="#js-内存泄漏如何检测-场景有哪些">JS 内存泄漏如何检测?场景有哪些?</a></li><li><a href="#闭包是内存泄漏嘛">闭包是内存泄漏嘛?</a></li></ul></nav><h2 id="event-loop-事件循环-事件轮询-的机制是怎样的" tabindex="-1">event loop (事件循环/事件轮询)的机制是怎样的? <a class="header-anchor" href="#event-loop-事件循环-事件轮询-的机制是怎样的" aria-hidden="true">#</a></h2><div class="tip custom-block"><p class="custom-block-title">答案</p><ol><li>清空函数调用堆栈 <ul><li>遇到微任务回调推入微任务队列</li><li>遇到宏任务回调挂起, 等待时机, 时机成熟推入宏任务队列</li></ul></li><li>清空微任务队列</li><li>渲染 DOM</li><li>不停轮询宏任务队列, 直至宏任务队列含有队头, 单个将队头推入函数调用堆栈</li><li>回到第一步, 不断重复整个流程</li></ol></div><p><img src="'+e+'" alt="Event Loop"></p><h2 id="什么是宏任务和微任务-两者有什么区别" tabindex="-1">什么是宏任务和微任务, 两者有什么区别? <a class="header-anchor" href="#什么是宏任务和微任务-两者有什么区别" aria-hidden="true">#</a></h2><div class="tip custom-block"><p class="custom-block-title">答案</p><p>宏任务包括 setTimeout、setInterval、Ajax、requestAnimationFrame、DOM 事件等。</p><p>微任务包括 Promise.then、Promise.catch、Promise.finally、MutationObserver、queueMicrotask、process.nextTick(Node 独有)。</p><p>宏任务是由浏览器规定的, 而微任务是 ES6 语法制定的。宏任务在 DOM 渲染后执行, 微任务在 DOM 渲染前执行。</p></div><h2 id="实现跨域的常见方式及原理" tabindex="-1">实现跨域的常见方式及原理? <a class="header-anchor" href="#实现跨域的常见方式及原理" aria-hidden="true">#</a></h2><div class="tip custom-block"><p class="custom-block-title">答案</p><ul><li>CORS : 服务端设置 Access-Control-Allow-Origin 响应头</li><li>JSONP : script 标签不受同源策略影响, 可动态创建 script 标签再让服务端返回一段调用回调函数的代码即可</li></ul><p>但不管是哪种方式, 都需要服务端的允许和配合。<a href="./../../../_POSTS/javascript/010_cross-domain.html">详情见这里</a></p></div><h2 id="cookie、localstorage-和-sessionstorage-的区别" tabindex="-1">cookie、localStorage 和 sessionStorage 的区别 <a class="header-anchor" href="#cookie、localstorage-和-sessionstorage-的区别" aria-hidden="true">#</a></h2><div class="tip custom-block"><p class="custom-block-title">答案</p><ol><li>cookie 会随着 HTTP 请求发送到服务端, 而 localStorage 与 sessionStorage 不会</li><li>cookie 最大容量为 4KB, 而 localStorage 与 sessionStorage 最大容量有 5M</li><li>sessionStorage 数据只存在于当前会话, 浏览器关闭则清空, 而 localStorage 数据会永久存储, 除非代码或手动删除</li><li>API 使用不同, JavaScript 操作 cookie 只能通过 document.cookie, 难以使用; 而 localStorage 与 sessionStorage 有较全的 API, 如 setItem()、getItem()、removeItem()、clear() 等</li></ol></div><h2 id="ajax、fetch-和-axios-有什么区别" tabindex="-1">Ajax、Fetch 和 Axios 有什么区别? <a class="header-anchor" href="#ajax、fetch-和-axios-有什么区别" aria-hidden="true">#</a></h2><div class="tip custom-block"><p class="custom-block-title">答案</p><p>三者都用于网络请求, 但是处于不同维度。</p><ul><li>Ajax(Asynchronous JavaScript and XML) 是一种技术统称</li><li>Fetch 是一个原生 API</li><li>Axios 是一个第三方库</li></ul></div><h2 id="垃圾回收机制" tabindex="-1">垃圾回收机制? <a class="header-anchor" href="#垃圾回收机制" aria-hidden="true">#</a></h2><div class="info custom-block"><p class="custom-block-title">前情提要</p><p>什么是垃圾回收?</p><p>通过自动内存管理实现内存分配和闲置资源回收。</p><p>基本思路: 确定哪个变量不会再使用, 然后释放它占用的内存。</p></div><div class="tip custom-block"><p class="custom-block-title">答案</p><ul><li>引用记数 : 循环引用会造成内存泄漏</li><li><strong>标记清理</strong></li></ul></div><h2 id="js-内存泄漏如何检测-场景有哪些" tabindex="-1">JS 内存泄漏如何检测?场景有哪些? <a class="header-anchor" href="#js-内存泄漏如何检测-场景有哪些" aria-hidden="true">#</a></h2><div class="tip custom-block"><p class="custom-block-title">答案</p><p>可使用 Chrome devTools 的 Performance 和 Memory 工具来检测 JS 内存。</p><p>场景: (以 Vue 为例)</p><ul><li>被全局变量、函数引用, 但组件销毁时未清除</li><li>被全局事件、定时器引用, 但组件销毁时未清除</li><li>被自定义事件引用, 但组件销毁时未清除</li></ul></div><h2 id="闭包是内存泄漏嘛" tabindex="-1">闭包是内存泄漏嘛? <a class="header-anchor" href="#闭包是内存泄漏嘛" aria-hidden="true">#</a></h2><div class="tip custom-block"><p class="custom-block-title">答案</p><p>虽然闭包影响的变量不会被垃圾回收, 但它不是内存泄漏。内存泄漏是非预期的, 而闭包是预期的。</p></div>',20),c=[t];function r(n,d,h,p,u,v){return i(),a("div",null,c)}const _=l(s,[["render",r]]);export{g as __pageData,_ as default};
