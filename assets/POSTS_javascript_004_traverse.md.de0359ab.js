import{_ as e,c as t,e as n,w as l,b as p,d as s,a as o,r as c,o as r}from"./app.9d7c8735.js";const v=JSON.parse('{"title":"JavaScript の循环与遍历","titleTemplate":false,"description":"","frontmatter":{"date":"2023-02-01 14:00:00","title":"JavaScript の循环与遍历","titleTemplate":false,"author":"Mochi","outline":[2,4],"categories":["post"],"tags":["javascript"]},"headers":[{"level":2,"title":"while 语句","slug":"while-语句","link":"#while-语句","children":[]},{"level":2,"title":"do...while","slug":"do-while","link":"#do-while","children":[]},{"level":2,"title":"for 语句","slug":"for-语句","link":"#for-语句","children":[]},{"level":2,"title":"for...in 语句","slug":"for-in-语句","link":"#for-in-语句","children":[]},{"level":2,"title":"for...of 语句","slug":"for-of-语句","link":"#for-of-语句","children":[]},{"level":2,"title":"for await...of 语句","slug":"for-await-of-语句","link":"#for-await-of-语句","children":[]},{"level":2,"title":"Array.prototype.forEach()","slug":"array-prototype-foreach","link":"#array-prototype-foreach","children":[]}],"relativePath":"_POSTS/javascript/004_traverse.md","lastUpdated":1675234285000}'),i={name:"_POSTS/javascript/004_traverse.md"},y=o(`<h1 id="javascript-の循环与遍历" tabindex="-1">JavaScript の循环与遍历 <a class="header-anchor" href="#javascript-の循环与遍历" aria-hidden="true">#</a></h1><p>JavaScript 有关遍历的方法那真的是太多了, 诸如 while、for、for..in、for...of、forEach 等等, 但是每个方法都有自己的适用场景。</p><h2 id="while-语句" tabindex="-1">while 语句 <a class="header-anchor" href="#while-语句" aria-hidden="true">#</a></h2><p>while 语句是一种先测试循环语句, 即先检测退出条件, 再执行循环体内的代码。因此, while 循环体内的代码可能不会执行。下面是 while 循环的语法:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#A6ACCD;"> (expression) statement</span></span>
<span class="line"></span></code></pre></div><p>这是一个例子:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#A6ACCD;"> (i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>在这个例子中, 变量 i 从 0 开始, 每次循环递增 2。只要 i 小于 10, 循环就会继续。</p><h2 id="do-while" tabindex="-1">do...while <a class="header-anchor" href="#do-while" aria-hidden="true">#</a></h2><p>do...while 语句是一种后测试循环语句, 即循环体中的代码执行后才会对退出条件进行求值。换句话说, 循环体内的代码至少执行一次。do...while 的语法如下:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">do</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">statement</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#A6ACCD;"> (expression)</span></span>
<span class="line"></span></code></pre></div><p>下面是一个例子:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">do</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#A6ACCD;"> (i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>在这个例子中, 只要 i 小于 10, 循环就会重复执行。i 从 0 开始, 每次循环递增 2。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>do...while 语法规定循环后必须带分号, 平常不用写是因为 ASI(自动分号) 的原因。</p></div><h2 id="for-语句" tabindex="-1">for 语句 <a class="header-anchor" href="#for-语句" aria-hidden="true">#</a></h2><p>for 语句也是先测试语句, 只不过增加了进入循环之前的初始化代码, 以及循环执行后要执行的表达式:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> (initialization</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> expression</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> post </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> loop </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> expression) statement</span></span>
<span class="line"></span></code></pre></div><p>下面是一个用例:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> (</span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i</span><span style="color:#89DDFF;">++</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ...执行一些操作</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>以上代码在循环开始前定义了变量 i 的初始值 0。然后求值条件表达式, 如果求值结果为 true（i &lt; 10）, 则执行循环体。因此循环体也可能不会执行。如果循环体被执行了, 则循环后表达式也会执行, 以便递增变量 i。for 循环跟下面的 while 循环是一样的:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#A6ACCD;"> (i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ...执行一些操作</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">++</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>for 语句其实就是 while 语句的语法糖。无法通过 while 循环实现的逻辑, 同样无法使用 for 循环实现。</p></div>`,23),D=o(`<p>相当于：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">j</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">j</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">j</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">j</span><span style="color:#89DDFF;">++</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">j</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 每个迭代重新绑定</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>初始化、条件表达式和循环后表达式都不是必需的。如果只包含条件表达式, 那么 for 循环实际上就变成了 while 循环:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> ) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ...执行一些操作</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">++</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>如果条件表达式被忽略, 那么就被认为永远为真, 需要使用 break 手动跳出循环。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> (</span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i</span><span style="color:#89DDFF;">++</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">9</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">break</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="for-in-语句" tabindex="-1">for...in 语句 <a class="header-anchor" href="#for-in-语句" aria-hidden="true">#</a></h2>`,7),F=o(`<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> (</span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> variable </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> object) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">statement</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><ul><li>variable：在每次迭代时, variable 会被赋值为不同的属性名</li><li>object：非 Symbol 类型的可枚举属性被迭代的对象</li></ul><p>与 for 循环一样, 这里控制语句中的 const 也不是必需的。但为了确保这个局部变量不会被修改, 推荐使用 const。</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>ECMAScript 中的对象属性是无序的, 因此 for...in 语句不能保证返回对象属性的顺序。且 for...in 是为遍历对象属性而构建的, 不建议与数组一起使用。</p></div><p>如果仅需迭代对象自身的属性, 而不用考虑原型, 可以使用 getOwnPropertyNames() 或执行 hasOwnProperty 来确定某属性是否是对象本身的属性。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Symbol</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">b</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">a</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">b</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__proto__</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">c </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> (</span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> key </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> obj) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">hasOwnProperty</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;">) </span><span style="color:#676E95;font-style:italic;">// a</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>for...in 也支持 continue 与 break。</p></div><h2 id="for-of-语句" tabindex="-1">for...of 语句 <a class="header-anchor" href="#for-of-语句" aria-hidden="true">#</a></h2><p>for...of 语句用于遍历可迭代对象, 包括 Array、Map、Set、TypedArray、String、arguments、NodeList 对象或是自定义迭代对象。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> (</span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> variable </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> iterable) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">statement</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>与 for 循环一样, 这里控制语句中的 const 也不是必需的。但为了确保这个局部变量不会被修改, 推荐使用 const。</p><p>for...of 循环会按照可迭代对象的 next() 方法产生值的顺序迭代对象。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>for...of 也支持 continue 与 break。</p></div><h2 id="for-await-of-语句" tabindex="-1">for await...of 语句 <a class="header-anchor" href="#for-await-of-语句" aria-hidden="true">#</a></h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/for-await...of" target="_blank" rel="noreferrer">for await...of</a> 语句用于遍历异步可迭代对象。</p><blockquote><p><a href="https://github.com/rxaviers/async-pool/blob/master/lib/es9.js" target="_blank" rel="noreferrer">async-pool es9 源码</a></p></blockquote><h2 id="array-prototype-foreach" tabindex="-1">Array.prototype.forEach() <a class="header-anchor" href="#array-prototype-foreach" aria-hidden="true">#</a></h2><p>forEach() 方法对<strong>数组</strong>的每个元素执行一次给定的函数。但需要注意的是:</p>`,18),C=p("code",null,"new Array(7) -> [empty × 7]",-1);function A(d,h,f,u,g,b){const a=c("f");return r(),t("div",null,[y,n(a,null,{default:l(()=>[s("for 循环头部的 let 不仅将 i 绑定到了 for 循环的块中, 事实上它将其重新绑定到了循环的每一个迭代中, 确保使用上一个循环迭代结束时的值重新进行赋值。")]),_:1}),D,n(a,null,{default:l(()=>[s("for...in 语句是为遍历对象属性而构建的, 它以任意顺序迭代一个对象的除 Symbol 以外的可枚举属性, 包括继承的可枚举属性。")]),_:1}),F,p("ul",null,[p("li",null,[n(a,null,{default:l(()=>[s("已删除或者未初始化的项将被跳过")]),_:1}),s(", 例如 "),C]),p("li",null,[n(a,null,{default:l(()=>[s("除了抛出异常以外, 没有办法中止或跳出 forEach() 循环")]),_:1})])])])}const m=e(i,[["render",A]]);export{v as __pageData,m as default};
