import{_ as e,c as t,d as n,w as p,e as a,b as s,a as o,r as c,o as i}from"./app.65c9d0ed.js";const G=JSON.parse('{"title":"JavaScript 基础语法","titleTemplate":false,"description":"","frontmatter":{"date":"2023-02-01 13:10:20","title":"JavaScript 基础语法","titleTemplate":false,"author":"Mochi","outline":[2,4],"categories":["post"],"tags":["javascript"]},"headers":[{"level":2,"title":"区分大小写","slug":"区分大小写","link":"#区分大小写","children":[]},{"level":2,"title":"标识符","slug":"标识符","link":"#标识符","children":[]},{"level":2,"title":"语句","slug":"语句","link":"#语句","children":[{"level":3,"title":"表达式","slug":"表达式","link":"#表达式","children":[]},{"level":3,"title":"语句的结果值","slug":"语句的结果值","link":"#语句的结果值","children":[]},{"level":3,"title":"自动分号","slug":"自动分号","link":"#自动分号","children":[]},{"level":3,"title":"if 语句","slug":"if-语句","link":"#if-语句","children":[]},{"level":3,"title":"switch 语句","slug":"switch-语句","link":"#switch-语句","children":[]},{"level":3,"title":"标签语句","slug":"标签语句","link":"#标签语句","children":[]},{"level":3,"title":"break 语句","slug":"break-语句","link":"#break-语句","children":[]},{"level":3,"title":"continue 语句","slug":"continue-语句","link":"#continue-语句","children":[]},{"level":3,"title":"try...catch 语句","slug":"try-catch-语句","link":"#try-catch-语句","children":[]},{"level":3,"title":"throw 语句","slug":"throw-语句","link":"#throw-语句","children":[]}]},{"level":2,"title":"严格模式","slug":"严格模式","link":"#严格模式","children":[]}],"relativePath":"_POSTS/javascript/003_basic-grammar.md","lastUpdated":1675231076000}'),r={name:"_POSTS/javascript/003_basic-grammar.md"},y=s("h1",{id:"javascript-基础语法",tabindex:"-1"},[a("JavaScript 基础语法 "),s("a",{class:"header-anchor",href:"#javascript-基础语法","aria-hidden":"true"},"#")],-1),D=s("p",null,"ECMAScript 语法在很大程度上借鉴了 C 语言和其它类 C 语言, 如 Java 与 Perl。熟悉这些语言的开发者, 应该很容易理解 ECMAScript 宽松的语法。",-1),F=s("h2",{id:"区分大小写",tabindex:"-1"},[a("区分大小写 "),s("a",{class:"header-anchor",href:"#区分大小写","aria-hidden":"true"},"#")],-1),C=s("h2",{id:"标识符",tabindex:"-1"},[a("标识符 "),s("a",{class:"header-anchor",href:"#标识符","aria-hidden":"true"},"#")],-1),A=s("p",null,"所谓标识符, 就是变量、函数、属性或函数参数地名称。标识符可以由一或多个下列字符组成：",-1),d=s("ul",null,[s("li",null,"第一个字符必须是一个字母、下划线(_)或美元符号($)"),s("li",null,"剩下的其它字符可以是字母、下划线、美元符号或数字")],-1),h=s("p",null,"标识符中的字母可以是扩展 ASCII（Extended ASCII）中的字母, 也可以是 Unicode 的字母字符, 如 À 和 Æ （但不推荐使用）。",-1),u=o('<div class="warning custom-block"><p class="custom-block-title">注意</p><ol><li>关键字、保留字、true、false 和 null 不能作为标识符</li><li>但 undefined 却可以, 因为它既不是关键字, 也不是保留字, 所以代码中千万不要修改 undefined 的值</li></ol></div><h2 id="语句" tabindex="-1">语句 <a class="header-anchor" href="#语句" aria-hidden="true">#</a></h2><p>语句是一条完整的指令, 可以包含关键字、运算符、变量、常量以及表达式。语句一般可分为：</p><ol><li>声明式语句：<code>import _ from &#39;lodash&#39;</code></li><li>赋值语句：<code>const variable = 123</code></li><li>执行式语句：<code>if (true) { // ... }</code></li></ol><h3 id="表达式" tabindex="-1">表达式 <a class="header-anchor" href="#表达式" aria-hidden="true">#</a></h3>',5),_=o('<ol><li>字面值表达式：<code>1</code></li><li>变量表达式：<code>a</code></li><li>算数表达式：<code>a * b</code></li><li>函数表达式：<code>(function () {})()、setTimeout(function () {}, 1000)</code></li><li>赋值表达式：<code>a = b * 2 // 注意没有定义变量</code></li></ol><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>有时一个独立表达式也可以被称为语句, 表达式是语句的子集。</p></div><h3 id="语句的结果值" tabindex="-1">语句的结果值 <a class="header-anchor" href="#语句的结果值" aria-hidden="true">#</a></h3>',3),f=o(`<p>获得结果值的最直接办法就是在浏览器开发控制台中输入语句, 默认情况下控制台会显示所执行的最后一条语句的结果值。</p><ul><li>赋值表达式 ：以赋值表达式 <code>a = 18</code> 为例, 其结果值是赋给 a 的值 18</li><li>变量声明：但规范定义变量声明的结果值是 undefined, 如 <code>var a = 18</code>、<code>let a = 18</code></li><li>代码块：代码块 <code>{...}</code> 的结果值是最后一个语句的结果</li></ul><p>语法不允许获得语句的结果值并将其赋值给另外一个变量（至少目前不行）。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> a</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> b</span></span>
<span class="line"><span style="color:#A6ACCD;">a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (</span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 运行不了</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">b</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">24</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>可以使用 eval(...) 来获取语句结果值, 但切勿在实际开发中这样操作：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> a</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> b</span></span>
<span class="line"><span style="color:#A6ACCD;">a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">eval</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">if (true) { b = 24}</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// a = 24</span></span>
<span class="line"></span></code></pre></div><p>这并不是一个好办法, 但确实管用。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><ul><li>语句结果值目前使用场景：可以在 if 语句的判断条件杂糅进去, 使代码更简洁, 如： <code>if (str &amp;&amp; (matches = str.match(/[aeiou]/g)))</code></li><li>语句结果值未来使用场景：不需要将语句封装成函数再调用 return 来返回值</li></ul></div><h3 id="自动分号" tabindex="-1">自动分号 <a class="header-anchor" href="#自动分号" aria-hidden="true">#</a></h3><p>ECMAScript 规定语句以分号结尾。如果缺失了必要的分号, 代码将无法运行, 语言的容错性也会降低。为了让我们能够忽略那些不必要的分号, JavaScript 会自动为代码补上缺失的分号, 即自动分号插入（Automatic Semicolon Insertion, ASI）。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> test </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 没有分号, 编译器会进行 ASI</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> Test </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 有分号, 推荐</span></span>
<span class="line"></span></code></pre></div>`,11),g=o(`<p>ASI 在某些情况下很有用, 比如：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">do</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#A6ACCD;"> (a</span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// do...while 循环后必须带分号</span></span>
<span class="line"></span></code></pre></div><p>语法规定 do...while 循环后必须带分号, 而 while 和 for 循环后则不需要。大多数人不记得这一点, 此时 ASI 就会自动补上分号。其它涉及 ASI 的情况是 break、continue、return、和 yield 等关键字。</p>`,3),b={class:"tip custom-block"},v=s("p",{class:"custom-block-title"},"TIP",-1),k=s("li",null,"加不加分号取决于代码习惯, 遵循仓库风格即可",-1),m=s("li",null,'不加分号时, 括号"(", 方括号"[", 正则开头的斜杠"/" , 加号"+", 减号"-" 作为行首可能会导致上下行解析出现问题',-1),E=s("li",null,"建议在有需要的地方加上分号, 将对 ASI 的依赖降到最低",-1),S=o(`<h3 id="if-语句" tabindex="-1">if 语句 <a class="header-anchor" href="#if-语句" aria-hidden="true">#</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (condition) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">statement1</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">statement2</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>这里的条件（condition）可以是任何表达式, 并且求值结果不一定是布尔值。ECMAScript 会自动调用 Boolean() 函数将表达式的值转换为布尔值。</p><ul><li>如果条件求值为 true, 则执行语句 statement1</li><li>如果条件求值为 false, 则执行语句 statement2</li></ul><p>当 if 和 else 只包含单条语句的时候可以省略代码块的 &quot;{}&quot;</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (condition) statement1 </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#A6ACCD;"> statement2</span></span>
<span class="line"></span></code></pre></div><p>很多人误以为 JavaScript 中有 else if, 因为可以这样来写代码:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (condition1) statement1 </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (condition2) statement2 </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#A6ACCD;"> statement3</span></span>
<span class="line"></span></code></pre></div>`,8),T=o(`<h3 id="switch-语句" tabindex="-1">switch 语句 <a class="header-anchor" href="#switch-语句" aria-hidden="true">#</a></h3><p>switch 语句是与 if 语句紧密相关的一种流程控制语句, 从其它语言借鉴而来。ECMAScript 中 switch 语句跟 C 语言中的 switch 语句的语法非常相似, 如下所示:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">switch</span><span style="color:#A6ACCD;"> (key) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#A6ACCD;"> value</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 可选, 用于匹配 key 的子句</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 当 key 和 value 完全匹配时(===), 执行此处语句</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">break</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 可选, 用于跳出switch</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#A6ACCD;"> valueN</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">break</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 可选, 当没有 case 与 key 匹配时执行</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">break</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><ul><li>key：一个用来与 case 子语句匹配的表达式</li><li>case value：可选, 用于匹配 key 的 case 子句, value 也是一个表达式, 当 key === value 时, 执行相应语句</li><li>break：可选, 用于跳出 switch 语句, 如没有, 则会匹配下一个 case</li><li>default：可选, 如果给定, 该子句会在 key 与任一 value 不匹配时执行</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">1</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">switch</span><span style="color:#A6ACCD;"> (a) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// ...执行一些代码</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">break</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// ...执行另外一些代码</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">break</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ...执行缺省代码</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div>`,5),j=o(`<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">1</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">2</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">switch</span><span style="color:#A6ACCD;"> (</span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">||</span><span style="color:#A6ACCD;"> b </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 永远不会执行到这里</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">break</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// ...执行一些代码</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">break</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// ...执行另外一些代码</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">break</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// ...执行缺省代码</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">break</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>因为 (a || b == 2) 的结果是 1 而不是 true, 所以永远不会执行, 此时可通过强制表达式返回 true 或 false, 如 !!(a || b == 2)。</p>`,2),w={class:"tip custom-block"},I=s("p",{class:"custom-block-title"},"TIP",-1),x=s("li",null,"switch 语句在适当情况下可替换掉 if...else if...else 语句",-1),P=s("li",null,"switch 语句在比较每个条件的值时会使用全等操作符 （===）",-1),V=s("li",null,"default 可以放在 case 之上, JavaScript 会在找不到匹配项时跳回至 default, 但推荐将其放在最下面",-1),N=o(`<h3 id="标签语句" tabindex="-1">标签语句 <a class="header-anchor" href="#标签语句" aria-hidden="true">#</a></h3><p>标签语句需要和 break 或 continue 语句一起使用。标签（或标记）就是在一条语句前加个可以引用的标识符。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">label</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> statement</span></span>
<span class="line"></span></code></pre></div><p>标签语句的典型应用场景是嵌套循环:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> i</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> j</span></span>
<span class="line"><span style="color:#FFCB6B;">loop1</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> (i </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i</span><span style="color:#89DDFF;">++</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">loop2</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">j</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">j</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">j</span><span style="color:#89DDFF;">++</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">j</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">continue</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">loop1</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">i = </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">, j = </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">j</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// i = 0, j = 0</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// i = 0, j = 1</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// i = 0, j = 2</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// i = 1, j = 0</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// i = 2, j = 0</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// i = 2, j = 1</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// i = 2, j = 2</span></span>
<span class="line"></span></code></pre></div><h3 id="break-语句" tabindex="-1">break 语句 <a class="header-anchor" href="#break-语句" aria-hidden="true">#</a></h3><p>break 语句用于终止整个循环（包括 while、do...while、for、for...in、for...of）、switch 语句或标签语句。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> (</span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i</span><span style="color:#89DDFF;">++</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">3</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;font-style:italic;">break</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 0</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 1</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 2</span></span>
<span class="line"></span></code></pre></div><h3 id="continue-语句" tabindex="-1">continue 语句 <a class="header-anchor" href="#continue-语句" aria-hidden="true">#</a></h3><p>continue 语句用于中止当前迭代（包括 while、do...while、for、for...in、for...of）或标签语句。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> (</span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i</span><span style="color:#89DDFF;">++</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">3</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;font-style:italic;">continue</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>与 break 语句的区别在于, continue 并不会终止整个循环, 而只是中止当前迭代:</p><ul><li>在 while 循环中, 流程控制跳转回条件判断</li><li>在 for 循环中, 流程控制转到更新语句</li></ul><h3 id="try-catch-语句" tabindex="-1">try...catch 语句 <a class="header-anchor" href="#try-catch-语句" aria-hidden="true">#</a></h3><p>try...catch 语句标记要尝试的语句块, 并指定一个出现异常时抛出的响应。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">try</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 执行一系列操作, 期间可能抛错</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">catch</span><span style="color:#A6ACCD;"> (error) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 如果 try 语句块抛错, 则错误为 error</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>try 语句包含了一个 try 块, 和至少一个 catch 块或者一个 finally 块的其中一个, 或者两个都有, 下面是 try 声明的三种形式:</p><ol><li><code>try...catch</code></li><li><code>try...finally</code></li><li><code>try...catch...finally</code></li></ol><p>finally 的代码总在 try 之后执行, 如果有 catch 的话在 catch 之后执行。</p><h3 id="throw-语句" tabindex="-1">throw 语句 <a class="header-anchor" href="#throw-语句" aria-hidden="true">#</a></h3><p>throw 语句用来抛出一个用户自定义的异常。throw 之后的语句将不会执行, 并且控制流转到调用堆栈的第一个 catch 块。如果调用者函数中没有 catch 块, 程序将会终止。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">throw</span><span style="color:#A6ACCD;"> expression</span></span>
<span class="line"></span></code></pre></div><ul><li>expression : 要抛出的表达式</li></ul><h1 id="debugger-语句" tabindex="-1">debugger 语句 <a class="header-anchor" href="#debugger-语句" aria-hidden="true">#</a></h1><p>debugger 语句调用任何可用的调试功能, 相当于设置断点。如果没有调试功能可用, 则此语句不起作用。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#F78C6C;">debugger</span></span>
<span class="line"></span></code></pre></div><h2 id="严格模式" tabindex="-1">严格模式 <a class="header-anchor" href="#严格模式" aria-hidden="true">#</a></h2><p>ECMAScript 5 增加了严格模式（strict mode）的概念。严格模式是一种不同的 JavaScript 解析和执行模型, ECMAScript 3 的一些不规范写法在这种模式下会被处理, 对于不安全的活动将抛出错误。</p><p>要对整个脚本启用严格模式, 在脚本开头加上这一行：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">use strict</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span></code></pre></div><p>虽然看起来像个没有赋值给任何变量的字符串, 但它其实是一个预处理指令。任何支持的 JavaScript 引擎看到它都会切换到严格模式。选择这种语法形式的目的是不破坏 ECMAScript 3 语法。 也可以单独指定一个函数在严格模式下执行, 只要把这个预处理指令放到函数体开头即可：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">doSomething</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">use strict</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 函数体 }</span></span>
<span class="line"></span></code></pre></div><p>严格模式会影响 JavaScript 执行的很多方面, 所有现代浏览器都支持严格模式。</p>`,33);function J(B,M,R,$,q,O){const l=c("f");return i(),t("div",null,[y,D,F,n(l,null,{default:p(()=>[a("ECMAScript 中一切都区分大小写。")]),_:1}),a("无论是变量、函数名还是操作符, 都区分大小写。换句话说, 变量 test 和变量 Test 是两个完全不同的变量。类似地, typeof 不能作为变量或函数名, 因为它是一个关键字, 但 Typeof 却是一个完全有效地变量或函数名。"),C,A,d,h,s("p",null,[a("按照惯例, "),n(l,null,{default:p(()=>[a("ECMAScript 标识符推荐使用驼峰大小写形式")]),_:1}),a(", 即第一个单词的首字母小写, 后面每个单词的首字母大写, 如 myCar、firstSecond。虽然这种写法并不是强制性的, 但因为这种形式跟 ECMAScript 内置函数和对象命名方式一致, 所以算是最佳实践。")]),u,n(l,null,{default:p(()=>[a("表达式不能独立表达出意思。从表现形式上来讲, 一般是获取一个值, 可直接赋给变量")]),_:1}),a("。例如："),_,s("p",null,[a("很多人不知道, "),n(l,null,{default:p(()=>[a("语句也有结果值")]),_:1}),a("（undefined 也算）。")]),f,n(l,null,{default:p(()=>[a("ASI 只在换行符处起作用, 而不会在代码行的中间插入分号")]),_:1}),a("。如果 JavaScript 编译器发现代码行可能因为缺失分号而导致错误, 那么它就会自动补上分号。并且, 只有在代码行末尾与换行符之间除了空格和注释之外没有别的内容时, 它才会这么做。"),g,s("div",b,[v,s("ol",null,[k,m,s("li",null,[n(l,null,{default:p(()=>[a('最佳实践：一行以 "(", "[", "+", "-", "/" 开头时, 在其前加上分号')]),_:1})]),E])]),S,s("p",null,[a("实际上,"),n(l,null,{default:p(()=>[a('JavaScript 没有 else if, else 其后的 if 只是包含单条语句时省略了 "{}"')]),_:1}),a("。")]),T,n(l,null,{default:p(()=>[a("key 与 value 的匹配算法与 === 相同")]),_:1}),a("。有时可能会需要通过强制类型转换来进行相等比较, 这时就需要做一些特殊处理:"),j,s("div",w,[I,s("ol",null,[s("li",null,[n(l,null,{default:p(()=>[a("当 case 没有 break 时, 会执行下面的 case 代码, 且不用再次判断")]),_:1})]),x,P,s("li",null,[n(l,null,{default:p(()=>[a("为避免不必要的条件判断, 最好给每个条件后面都加上 break 语句")]),_:1}),a("。如果确实需要连续匹配几个条件时, 推荐写个注释表明是故意忽略了 break")]),V])]),N])}const z=e(r,[["render",J]]);export{G as __pageData,z as default};
