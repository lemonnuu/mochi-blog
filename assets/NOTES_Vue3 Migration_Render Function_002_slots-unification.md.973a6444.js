import{_ as s,c as a,o as n,a as l}from"./app.9d7c8735.js";const C=JSON.parse('{"title":"插槽统一","description":"","frontmatter":{"outline":[1,2]},"headers":[{"level":2,"title":"概览","slug":"概览","link":"#概览","children":[]},{"level":2,"title":"2.x 语法","slug":"_2-x-语法","link":"#_2-x-语法","children":[]},{"level":2,"title":"3.x 语法","slug":"_3-x-语法","link":"#_3-x-语法","children":[]},{"level":2,"title":"迁移策略","slug":"迁移策略","link":"#迁移策略","children":[]}],"relativePath":"_NOTES/Vue3 Migration/Render Function/002_slots-unification.md","lastUpdated":1677028957000}'),o={name:"_NOTES/Vue3 Migration/Render Function/002_slots-unification.md"},p=l(`<h1 id="插槽统一" tabindex="-1">插槽统一 <a class="header-anchor" href="#插槽统一" aria-hidden="true">#</a></h1><h2 id="概览" tabindex="-1">概览 <a class="header-anchor" href="#概览" aria-hidden="true">#</a></h2><p>此更改统一了 3.x 中的普通插槽和作用域插槽。</p><p>以下是变化的变更总结:</p><ul><li><code>this.$slots</code> 现在将插槽作为<strong>函数</strong>公开</li><li>非兼容 : 移除 <code>this.$scopedSlots</code></li></ul><h2 id="_2-x-语法" tabindex="-1">2.x 语法 <a class="header-anchor" href="#_2-x-语法" aria-hidden="true">#</a></h2><p>当使用渲染函数, 即 <code>h</code> 时, 2.x 曾经在内容节点上定义 slot 数据 property。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 2.x 语法</span></span>
<span class="line"><span style="color:#82AAFF;">h</span><span style="color:#A6ACCD;">(LayoutComponent</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> [</span><span style="color:#82AAFF;">h</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">div</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">slot</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">header</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">header)</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">h</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">div</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">slot</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">content</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">content)])</span></span>
<span class="line"></span></code></pre></div><p>此外, 可以使用以下语法引用作用域插槽：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 2.x 语法</span></span>
<span class="line"><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">$scopedSlots</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">header</span></span>
<span class="line"></span></code></pre></div><h2 id="_3-x-语法" tabindex="-1">3.x 语法 <a class="header-anchor" href="#_3-x-语法" aria-hidden="true">#</a></h2><p>在 3.x 中, 插槽以对象的形式定义为当前节点的子节点:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 3.x Syntax</span></span>
<span class="line"><span style="color:#82AAFF;">h</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">  LayoutComponent</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">{},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">header</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">h</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">div</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">header)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">content</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">h</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">div</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">content)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>当你需要以编程方式引用作用域插槽时, 它们现在被统一到 <code>$slots</code> 选项中了。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 2.x 语法</span></span>
<span class="line"><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">$scopedSlots</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">header</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 3.x 语法</span></span>
<span class="line"><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">$slots</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">header</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"></span></code></pre></div><h2 id="迁移策略" tabindex="-1">迁移策略 <a class="header-anchor" href="#迁移策略" aria-hidden="true">#</a></h2><p>大部分更改已经在 2.6 中发布。因此, 迁移可以一步到位：</p><ul><li>在 3.x 中, 将所有 <code>this.$scopedSlots</code> 替换为 <code>this.$slots</code></li><li>将所有 <code>this.$slots.mySlot</code> 替换为 <code>this.$slots.mySlot()</code></li></ul>`,18),e=[p];function t(c,r,i,D,y,F){return n(),a("div",null,e)}const d=s(o,[["render",t]]);export{C as __pageData,d as default};
